{"version":3,"file":"esbuild-executor.js","sourceRoot":"","sources":["../../../src/lib/esbuild/esbuild-executor.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG;;;;;;;;;;;;;;;;;;;;;;;;;;AAWH;;;;;;GAMG;AACH,MAAa,eAAe;IAM1B;;;;;OAKG;IACH,YAAoB,gBAAgB,KAAK;QAArB,kBAAa,GAAb,aAAa,CAAQ;QARjC,gBAAW,GAAG,KAAK,CAAC;QAS1B,IAAI,CAAC,YAAY;YACf,IAAI,CAAC,gBAAgB;gBACrB,IAAI,CAAC,qBAAqB;oBACxB,GAAG,EAAE;wBACH,MAAM,IAAI,KAAK,CAAC,gCAAgC,CAAC,CAAC;oBACpD,CAAC,CAAC;IACR,CAAC;IAED;;;;OAIG;IACH,MAAM,CAAC,KAAK,CAAC,gBAAgB;QAC3B,yEAAyE;QACzE,IAAI,CAAC;YACH,MAAM,EAAE,cAAc,EAAE,GAAG,wDAAa,SAAS,GAAC,CAAC;YACnD,MAAM,cAAc,CAAC,EAAE,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;YAE5C,OAAO,IAAI,CAAC;QACd,CAAC;QAAC,MAAM,CAAC;YACP,OAAO,KAAK,CAAC;QACf,CAAC;IACH,CAAC;IACD;;;;OAIG;IACK,KAAK,CAAC,aAAa;QACzB,IAAI,IAAI,CAAC,WAAW,EAAE,CAAC;YACrB,OAAO;QACT,CAAC;QAED,+FAA+F;QAC/F,IAAI,IAAI,CAAC,aAAa,IAAI,CAAC,CAAC,MAAM,eAAe,CAAC,gBAAgB,EAAE,CAAC,EAAE,CAAC;YACtE,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;YACrB,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;YAExB,OAAO;QACT,CAAC;QAED,IAAI,CAAC;YACH,8CAA8C;YAC9C,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,wDAAa,SAAS,GAAC,CAAC;YAErE,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;YAClC,IAAI,CAAC,qBAAqB,GAAG,cAAc,CAAC;YAC5C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAC5B,CAAC;QAAC,MAAM,CAAC;YACP,yEAAyE;YACzE,MAAM,IAAI,CAAC,OAAO,EAAE,CAAC;QACvB,CAAC;QAED,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC;IAC1B,CAAC;IAED;;OAEG;IACK,KAAK,CAAC,OAAO;QACnB,MAAM,EAAE,SAAS,EAAE,KAAK,EAAE,cAAc,EAAE,GAAG,wDAAa,cAAc,GAAC,CAAC;QAC1E,IAAI,CAAC,gBAAgB,GAAG,SAAS,CAAC;QAClC,IAAI,CAAC,qBAAqB,GAAG,cAAc,CAAC;QAC5C,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;QAE1B,uFAAuF;QACvF,4FAA4F;QAC5F,uBAAuB;QACvB,OAAO,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC;QAEvC,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC;IAC5B,CAAC;IAED,KAAK,CAAC,SAAS,CAAC,KAAa,EAAE,OAA0B;QACvD,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAE3B,OAAO,IAAI,CAAC,gBAAgB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;IAC/C,CAAC;IAED,KAAK,CAAC,KAAK,CAAC,OAAqB;QAC/B,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAE3B,OAAO,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;IACpC,CAAC;IAED,KAAK,CAAC,cAAc,CAAC,QAA0B,EAAE,OAA8B;QAC7E,MAAM,IAAI,CAAC,aAAa,EAAE,CAAC;QAE3B,OAAO,IAAI,CAAC,qBAAqB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;IACvD,CAAC;CACF;AAxGD,0CAwGC","sourcesContent":["/**\n * @license\n * Copyright Google LLC All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport type {\n  BuildOptions,\n  BuildResult,\n  FormatMessagesOptions,\n  PartialMessage,\n  TransformOptions,\n  TransformResult,\n} from 'esbuild';\n\n/**\n * Provides the ability to execute esbuild regardless of the current platform's support\n * for using the native variant of esbuild. The native variant will be preferred (assuming\n * the `alwaysUseWasm` constructor option is `false) due to its inherent performance advantages.\n * At first use of esbuild, a supportability test will be automatically performed and the\n * WASM-variant will be used if needed by the platform.\n */\nexport class EsbuildExecutor implements Pick<typeof import('esbuild'), 'transform' | 'formatMessages'> {\n  private esbuildTransform: this['transform'];\n  private esbuildBuild: this['build'];\n  private esbuildFormatMessages: this['formatMessages'];\n  private initialized = false;\n\n  /**\n   * Constructs an instance of the `EsbuildExecutor` class.\n   *\n   * @param alwaysUseWasm If true, the WASM-variant will be preferred and no support test will be\n   * performed; if false (default), the native variant will be preferred.\n   */\n  constructor(private alwaysUseWasm = false) {\n    this.esbuildBuild =\n      this.esbuildTransform =\n      this.esbuildFormatMessages =\n        () => {\n          throw new Error('esbuild implementation missing');\n        };\n  }\n\n  /**\n   * Determines whether the native variant of esbuild can be used on the current platform.\n   *\n   * @returns A promise which resolves to `true`, if the native variant of esbuild is support or `false`, if the WASM variant is required.\n   */\n  static async hasNativeSupport(): Promise<boolean> {\n    // Try to use native variant to ensure it is functional for the platform.\n    try {\n      const { formatMessages } = await import('esbuild');\n      await formatMessages([], { kind: 'error' });\n\n      return true;\n    } catch {\n      return false;\n    }\n  }\n  /**\n   * Initializes the esbuild transform and format messages functions.\n   *\n   * @returns A promise that fulfills when esbuild has been loaded and available for use.\n   */\n  private async ensureEsbuild(): Promise<void> {\n    if (this.initialized) {\n      return;\n    }\n\n    // If the WASM variant was preferred at class construction or native is not supported, use WASM\n    if (this.alwaysUseWasm || !(await EsbuildExecutor.hasNativeSupport())) {\n      await this.useWasm();\n      this.initialized = true;\n\n      return;\n    }\n\n    try {\n      // Use the faster native variant if available.\n      const { transform, build, formatMessages } = await import('esbuild');\n\n      this.esbuildTransform = transform;\n      this.esbuildFormatMessages = formatMessages;\n      this.esbuildBuild = build;\n    } catch {\n      // If the native variant is not installed then use the WASM-based variant\n      await this.useWasm();\n    }\n\n    this.initialized = true;\n  }\n\n  /**\n   * Transitions an executor instance to use the WASM-variant of esbuild.\n   */\n  private async useWasm(): Promise<void> {\n    const { transform, build, formatMessages } = await import('esbuild-wasm');\n    this.esbuildTransform = transform;\n    this.esbuildFormatMessages = formatMessages;\n    this.esbuildBuild = build;\n\n    // The ESBUILD_BINARY_PATH environment variable cannot exist when attempting to use the\n    // WASM variant. If it is then the binary located at the specified path will be used instead\n    // of the WASM variant.\n    delete process.env.ESBUILD_BINARY_PATH;\n\n    this.alwaysUseWasm = true;\n  }\n\n  async transform(input: string, options?: TransformOptions): Promise<TransformResult> {\n    await this.ensureEsbuild();\n\n    return this.esbuildTransform(input, options);\n  }\n\n  async build(options: BuildOptions): Promise<BuildResult> {\n    await this.ensureEsbuild();\n\n    return this.esbuildBuild(options);\n  }\n\n  async formatMessages(messages: PartialMessage[], options: FormatMessagesOptions): Promise<string[]> {\n    await this.ensureEsbuild();\n\n    return this.esbuildFormatMessages(messages, options);\n  }\n}\n"]}