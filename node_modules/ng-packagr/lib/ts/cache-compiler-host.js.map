{"version":3,"file":"cache-compiler-host.js","sourceRoot":"","sources":["../../../src/lib/ts/cache-compiler-host.ts"],"names":[],"mappings":"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","sourcesContent":["import type { CompilerHost, CompilerOptions } from '@angular/compiler-cli';\nimport convertSourceMap from 'convert-source-map';\nimport { createHash } from 'crypto';\nimport assert from 'node:assert';\nimport * as path from 'path';\nimport ts from 'typescript';\nimport { NgPackageConfig } from '../../ng-package.schema';\nimport { FileCache } from '../file-system/file-cache';\nimport { BuildGraph } from '../graph/build-graph';\nimport { Node } from '../graph/node';\nimport { EntryPointNode, fileUrl } from '../ng-package/nodes';\nimport { StylesheetProcessor } from '../styles/stylesheet-processor';\nimport { ensureUnixPath } from '../utils/path';\n\nexport function cacheCompilerHost(\n  graph: BuildGraph,\n  entryPoint: EntryPointNode,\n  compilerOptions: CompilerOptions,\n  moduleResolutionCache: ts.ModuleResolutionCache,\n  stylesheetProcessor?: StylesheetProcessor,\n  inlineStyleLanguage?: NgPackageConfig['inlineStyleLanguage'],\n  sourcesFileCache: FileCache = entryPoint.cache.sourcesFileCache,\n): CompilerHost {\n  const compilerHost = ts.createIncrementalCompilerHost(compilerOptions);\n\n  // Set the parsing mode to the same as TS 5.3 default for tsc. This provides a parse\n  // performance improvement by skipping non-type related JSDoc parsing.\n  // NOTE: The check for this enum can be removed when TS 5.3 support is the minimum.\n  if (ts.JSDocParsingMode) {\n    compilerHost.jsDocParsingMode = ts.JSDocParsingMode.ParseForTypeErrors;\n  }\n\n  const getNode = (fileName: string) => {\n    const nodeUri = fileUrl(ensureUnixPath(fileName));\n    let node = graph.get(nodeUri);\n\n    if (!node) {\n      node = new Node(nodeUri);\n      graph.put(node);\n    }\n\n    return node;\n  };\n\n  const addDependee = (fileName: string) => {\n    const node = getNode(fileName);\n    entryPoint.dependsOn(node);\n  };\n\n  const { flatModuleFile, destinationPath, entryFile } = entryPoint.data.entryPoint;\n  const flatModuleFileDtsFilename = `${flatModuleFile}.d.ts`;\n  const flatModuleFileDtsPath = ensureUnixPath(path.join(destinationPath, flatModuleFileDtsFilename));\n  const hasIndexEntryFile = path.basename(entryFile.toLowerCase()) === 'index.ts';\n\n  return {\n    ...compilerHost,\n\n    // ts specific\n    fileExists: (fileName: string) => {\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (cache.exists === undefined) {\n        cache.exists = compilerHost.fileExists.call(this, fileName);\n      }\n\n      return cache.exists;\n    },\n\n    getSourceFile: (fileName: string, languageVersion: ts.ScriptTarget) => {\n      addDependee(fileName);\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (!cache.sourceFile) {\n        cache.sourceFile = compilerHost.getSourceFile.call(this, fileName, languageVersion);\n      }\n\n      return cache.sourceFile;\n    },\n\n    writeFile: (\n      fileName: string,\n      data: string,\n      writeByteOrderMark: boolean,\n      onError?: (message: string) => void,\n      sourceFiles?: ReadonlyArray<ts.SourceFile>,\n    ) => {\n      if (fileName.includes('.ngtypecheck.')) {\n        return;\n      }\n\n      if (!sourceFiles?.length && fileName.endsWith('.tsbuildinfo')) {\n        // Save builder info contents to specified location\n        compilerHost.writeFile.call(this, fileName, data, writeByteOrderMark, onError, sourceFiles);\n\n        return;\n      }\n\n      assert(sourceFiles?.length === 1, 'Invalid TypeScript program emit for ' + fileName);\n      const outputCache = entryPoint.cache.outputCache;\n\n      if (fileName.endsWith('.d.ts')) {\n        if (fileName === flatModuleFileDtsPath) {\n          if (hasIndexEntryFile) {\n            // In case the entry file is index.ts, we should not emit the `d.ts` which are a re-export of the `index.ts`.\n            // Because it will cause a conflict.\n            return;\n          } else {\n            // Rename file to index.d.ts so that TypeScript can resolve types without\n            // them needing to be referenced in the package.json manifest.\n            fileName = fileName.replace(flatModuleFileDtsFilename, 'index.d.ts');\n          }\n        }\n\n        sourceFiles.forEach(source => {\n          const cache = sourcesFileCache.getOrCreate(source.fileName);\n          if (!cache.declarationFileName) {\n            cache.declarationFileName = ensureUnixPath(fileName);\n          }\n        });\n\n        if (outputCache.get(fileName)?.content === data) {\n          // Only emit files that changed content.\n          return;\n        }\n\n        outputCache.set(fileName, {\n          content: data,\n        });\n      } else {\n        fileName = fileName.replace(/\\.js(\\.map)?$/, '.mjs$1');\n        if (outputCache.get(fileName)?.content === data) {\n          return;\n        }\n\n        // Extract inline sourcemap which will later be used by rollup.\n        let map = undefined;\n        const version = createHash('sha256').update(data).digest('hex');\n\n        if (fileName.endsWith('.mjs')) {\n          if (outputCache.get(fileName)?.version === version) {\n            // Only emit changed files\n            return;\n          }\n\n          map = convertSourceMap.fromComment(data).toJSON();\n        }\n\n        outputCache.set(fileName, {\n          content: data,\n          version,\n          map,\n        });\n      }\n\n      compilerHost.writeFile.call(this, fileName, data, writeByteOrderMark, onError, sourceFiles);\n    },\n\n    readFile: (fileName: string) => {\n      addDependee(fileName);\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (cache.content === undefined) {\n        cache.content = compilerHost.readFile.call(this, fileName);\n      }\n\n      return cache.content;\n    },\n\n    resolveModuleNames: (moduleNames: string[], containingFile: string) => {\n      return moduleNames.map(moduleName => {\n        const { resolvedModule } = ts.resolveModuleName(\n          moduleName,\n          ensureUnixPath(containingFile),\n          compilerOptions,\n          compilerHost,\n          moduleResolutionCache,\n        );\n\n        return resolvedModule;\n      });\n    },\n\n    resourceNameToFileName: (resourceName: string, containingFilePath: string) => {\n      const resourcePath = path.resolve(path.dirname(containingFilePath), resourceName);\n      const containingNode = getNode(containingFilePath);\n      const resourceNode = getNode(resourcePath);\n      containingNode.dependsOn(resourceNode);\n\n      return resourcePath;\n    },\n\n    readResource: async (fileName: string) => {\n      addDependee(fileName);\n\n      const cache = sourcesFileCache.getOrCreate(fileName);\n      if (cache.content === undefined) {\n        if (!compilerHost.fileExists(fileName)) {\n          throw new Error(`Cannot read file ${fileName}.`);\n        }\n\n        if (/(?:html?|svg)$/.test(path.extname(fileName))) {\n          // template\n          cache.content = compilerHost.readFile.call(this, fileName);\n        } else {\n          // stylesheet\n          cache.content = await stylesheetProcessor.process({\n            filePath: fileName,\n            content: compilerHost.readFile.call(this, fileName),\n          });\n        }\n\n        cache.exists = true;\n      }\n\n      return cache.content;\n    },\n    transformResource: async (data, context) => {\n      if (context.resourceFile || context.type !== 'style') {\n        return null;\n      }\n\n      if (inlineStyleLanguage) {\n        const key = createHash('sha1').update(data).digest('hex');\n        const fileName = `${context.containingFile}-${key}.${inlineStyleLanguage}`;\n        const cache = sourcesFileCache.getOrCreate(fileName);\n        if (cache.content === undefined) {\n          cache.content = await stylesheetProcessor.process({\n            filePath: fileName,\n            content: data,\n          });\n\n          const virtualFileNode = getNode(fileName);\n          const containingFileNode = getNode(context.containingFile);\n          virtualFileNode.dependsOn(containingFileNode);\n        }\n\n        cache.exists = true;\n\n        return { content: cache.content };\n      }\n\n      return null;\n    },\n  };\n}\n\nexport function augmentProgramWithVersioning(program: ts.Program): void {\n  const baseGetSourceFiles = program.getSourceFiles;\n  program.getSourceFiles = function (...parameters) {\n    const files: readonly (ts.SourceFile & { version?: string })[] = baseGetSourceFiles(...parameters);\n\n    for (const file of files) {\n      if (file.version === undefined) {\n        file.version = createHash('sha256').update(file.text).digest('hex');\n      }\n    }\n\n    return files;\n  };\n}\n"]}