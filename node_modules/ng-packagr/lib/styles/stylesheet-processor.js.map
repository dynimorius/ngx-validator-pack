{"version":3,"file":"stylesheet-processor.js","sourceRoot":"","sources":["../../../src/lib/styles/stylesheet-processor.ts"],"names":[],"mappings":"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","sourcesContent":["import browserslist from 'browserslist';\nimport { existsSync } from 'fs';\nimport { dirname, join } from 'path';\nimport Piscina from 'piscina';\nimport { colors } from '../utils/color';\nimport { loadPostcssConfiguration } from './postcss-configuration';\n\nconst maxWorkersVariable = process.env['NG_BUILD_MAX_WORKERS'];\nconst maxThreads = typeof maxWorkersVariable === 'string' && maxWorkersVariable !== '' ? +maxWorkersVariable : 4;\n\nexport enum CssUrl {\n  inline = 'inline',\n  none = 'none',\n}\n\nexport class StylesheetProcessor {\n  private renderWorker: Piscina | undefined;\n\n  constructor(\n    private readonly projectBasePath: string,\n    private readonly basePath: string,\n    private readonly cssUrl?: CssUrl,\n    private readonly includePaths?: string[],\n    private readonly cacheDirectory?: string | false,\n  ) {\n    // By default, browserslist defaults are too inclusive\n    // https://github.com/browserslist/browserslist/blob/83764ea81ffaa39111c204b02c371afa44a4ff07/index.js#L516-L522\n    // We change the default query to browsers that Angular support.\n    // https://angular.io/guide/browser-support\n    (browserslist.defaults as string[]) = [\n      'last 2 Chrome versions',\n      'last 1 Firefox version',\n      'last 2 Edge major versions',\n      'last 2 Safari major versions',\n      'last 2 iOS major versions',\n      'Firefox ESR',\n    ];\n  }\n\n  async process({ filePath, content }: { filePath: string; content: string }): Promise<string> {\n    this.createRenderWorker();\n\n    return this.renderWorker.run({ content, filePath });\n  }\n\n  /** Destory workers in pool. */\n  destroy(): void {\n    void this.renderWorker?.destroy();\n  }\n\n  private createRenderWorker(): void {\n    // Do not use async FS calls in here as otherwise a race will be created which causes multiple FS calls to be done.\n    if (this.renderWorker) {\n      return;\n    }\n\n    const styleIncludePaths = [...this.includePaths];\n    let prevDir = null;\n    let currentDir = this.basePath;\n\n    while (currentDir !== prevDir) {\n      const p = join(currentDir, 'node_modules');\n      if (existsSync(p)) {\n        styleIncludePaths.push(p);\n      }\n\n      prevDir = currentDir;\n      currentDir = dirname(prevDir);\n    }\n\n    const browserslistData = browserslist(undefined, { path: this.basePath });\n\n    this.renderWorker = new Piscina({\n      filename: require.resolve('./stylesheet-processor-worker'),\n      maxThreads,\n      recordTiming: false,\n      env: {\n        ...process.env,\n        FORCE_COLOR: '' + colors.enabled,\n      },\n      workerData: {\n        postcssConfiguration: loadPostcssConfiguration(this.projectBasePath),\n        tailwindConfigPath: getTailwindConfigPath(this.projectBasePath),\n        projectBasePath: this.projectBasePath,\n        browserslistData,\n        targets: transformSupportedBrowsersToTargets(browserslistData),\n        cacheDirectory: this.cacheDirectory,\n        cssUrl: this.cssUrl,\n        styleIncludePaths,\n      },\n    });\n  }\n}\n\nfunction transformSupportedBrowsersToTargets(supportedBrowsers: string[]): string[] {\n  const transformed: string[] = [];\n\n  // https://esbuild.github.io/api/#target\n  const esBuildSupportedBrowsers = new Set(['safari', 'firefox', 'edge', 'chrome', 'ios']);\n\n  for (const browser of supportedBrowsers) {\n    let [browserName, version] = browser.split(' ');\n\n    // browserslist uses the name `ios_saf` for iOS Safari whereas esbuild uses `ios`\n    if (browserName === 'ios_saf') {\n      browserName = 'ios';\n    }\n\n    // browserslist uses ranges `15.2-15.3` versions but only the lowest is required\n    // to perform minimum supported feature checks. esbuild also expects a single version.\n    [version] = version.split('-');\n\n    if (esBuildSupportedBrowsers.has(browserName)) {\n      if (browserName === 'safari' && version === 'tp') {\n        // esbuild only supports numeric versions so `TP` is converted to a high number (999) since\n        // a Technology Preview (TP) of Safari is assumed to support all currently known features.\n        version = '999';\n      }\n\n      transformed.push(browserName + version);\n    }\n  }\n\n  return transformed.length ? transformed : undefined;\n}\n\n/** The list of valid config files can be found https://github.com/tailwindlabs/tailwindcss/blob/ba5454543e74a6d702ce11b410d27672c2ee4b3f/src/util/resolveConfigPath.js#L4-L9*/\nconst tailwindConfigFiles = [\n  './tailwind.config.js',\n  './tailwind.config.cjs',\n  './tailwind.config.mjs',\n  './tailwind.config.ts',\n];\n\nfunction getTailwindConfigPath(projectRoot: string): string | undefined {\n  // A configuration file can exist in the project or workspace root\n  for (const configFile of tailwindConfigFiles) {\n    // Irrespective of the name project level configuration should always take precedence.\n    const fullPath = join(projectRoot, configFile);\n    if (existsSync(fullPath)) {\n      return fullPath;\n    }\n  }\n\n  return undefined;\n}\n"]}