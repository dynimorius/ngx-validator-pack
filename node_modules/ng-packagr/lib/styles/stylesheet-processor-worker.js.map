{"version":3,"file":"stylesheet-processor-worker.js","sourceRoot":"","sources":["../../../src/lib/styles/stylesheet-processor-worker.ts"],"names":[],"mappings":"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","sourcesContent":["import { dirname, extname, relative } from 'node:path';\nimport { pathToFileURL } from 'node:url';\nimport { workerData } from 'node:worker_threads';\nimport postcss from 'postcss';\nimport { EsbuildExecutor } from '../esbuild/esbuild-executor';\nimport { generateKey, readCacheEntry, saveCacheEntry } from '../utils/cache';\nimport * as log from '../utils/log';\nimport {createCssResourcePlugin} from './css-resource-plugin';\nimport { PostcssConfiguration } from './postcss-configuration';\nimport { CssUrl } from './stylesheet-processor';\n\nconst {\n  tailwindConfigPath,\n  projectBasePath,\n  browserslistData,\n  targets,\n  cssUrl,\n  styleIncludePaths,\n  postcssConfiguration,\n} = workerData as {\n  tailwindConfigPath: string | undefined;\n  postcssConfiguration: PostcssConfiguration | undefined;\n  browserslistData: string;\n  targets: string[];\n  projectBasePath: string;\n  cssUrl: CssUrl;\n  styleIncludePaths: string[];\n  cacheDirectory: string | undefined;\n};\n\nlet cacheDirectory = workerData.cacheDirectory;\nlet postCssProcessor: ReturnType<typeof postcss> | undefined;\nlet esbuild: EsbuildExecutor;\n\ninterface RenderRequest {\n  content: string;\n  filePath: string;\n}\n\nconst CACHE_KEY_VALUES = [...browserslistData, ...styleIncludePaths, cssUrl].join(':');\n\n/**\n * An array of keywords that indicate Tailwind CSS processing is required for a stylesheet.\n *\n * Based on https://tailwindcss.com/docs/functions-and-directives\n */\nconst TAILWIND_KEYWORDS = [\n  '@tailwind',\n  '@layer',\n  '@apply',\n  '@config',\n  'theme(',\n  'screen(',\n  '@screen', // Undocumented in version 3, see: https://github.com/tailwindlabs/tailwindcss/discussions/7516.\n];\n\nasync function render({ content, filePath }: RenderRequest): Promise<string> {\n  let key: string | undefined;\n  if (cacheDirectory && !content.includes('@import') && !content.includes('@use')) {\n    // No transitive deps, we can cache more aggressively.\n    key = await generateKey(content, CACHE_KEY_VALUES);\n    const result = await readCacheEntry(cacheDirectory, key);\n    if (result) {\n      result.warnings.forEach(msg => log.warn(msg));\n\n      return result.css;\n    }\n  }\n\n  // Render pre-processor language (sass, styl, less)\n  let renderedCss = await renderCss(filePath, content);\n\n  // We cannot cache CSS re-rendering phase, because a transitive dependency via (@import) can case different CSS output.\n  // Example a change in a mixin or SCSS variable.\n  if (!key) {\n    key = await generateKey(renderedCss, CACHE_KEY_VALUES);\n  }\n\n  if (cacheDirectory) {\n    const cachedResult = await readCacheEntry(cacheDirectory, key);\n    if (cachedResult) {\n      cachedResult.warnings.forEach(msg => log.warn(msg));\n\n      return cachedResult.css;\n    }\n  }\n\n  const warnings: string[] = [];\n  if (postCssProcessor && (postcssConfiguration || (tailwindConfigPath && hasTailwindKeywords(renderedCss)))) {\n    const result = await postCssProcessor.process(renderedCss, {\n      from: filePath,\n      to: filePath.replace(extname(filePath), '.css'),\n    });\n\n    warnings.push(...result.warnings().map(w => w.toString()));\n    renderedCss = result.css;\n  }\n\n  const {\n    outputFiles,\n    warnings: esBuildWarnings,\n    errors: esbuildErrors,\n  } = await esbuild.build({\n    stdin: {\n      contents: renderedCss,\n      loader: 'css',\n      resolveDir: dirname(filePath),\n    },\n    plugins: [createCssResourcePlugin(cssUrl)],\n    write: false,\n    sourcemap: false,\n    minify: true,\n    bundle: true,\n    absWorkingDir: projectBasePath,\n    target: targets,\n  });\n\n  const code = outputFiles[0].text;\n  if (esBuildWarnings.length > 0) {\n    warnings.push(...(await esbuild.formatMessages(esBuildWarnings, { kind: 'warning' })));\n    warnings.forEach(msg => log.warn(msg));\n  }\n\n  if (esbuildErrors.length > 0) {\n    const errors = await esbuild.formatMessages(esBuildWarnings, { kind: 'error' });\n    errors.forEach(msg => log.error(msg));\n\n    throw new Error(`An error has occuried while processing ${filePath}.`);\n  }\n\n  if (cacheDirectory) {\n    await saveCacheEntry(\n      cacheDirectory,\n      key,\n      JSON.stringify({\n        css: code,\n        warnings,\n      }),\n    );\n  }\n\n  return code;\n}\n\nasync function renderCss(filePath: string, css: string): Promise<string> {\n  const ext = extname(filePath);\n\n  switch (ext) {\n    case '.sass':\n    case '.scss': {\n      return (await import('sass')).compileString(css, {\n        url: pathToFileURL(filePath),\n        syntax: '.sass' === ext ? 'indented' : 'scss',\n        loadPaths: styleIncludePaths,\n      }).css;\n    }\n    case '.less': {\n      const { css: content } = await (\n        await import('less')\n      ).default.render(css, {\n        filename: filePath,\n        javascriptEnabled: true,\n        paths: styleIncludePaths,\n      });\n\n      return content;\n    }\n\n    case '.css':\n    default:\n      return css;\n  }\n}\n\nfunction getTailwindPlugin() {\n  // Attempt to setup Tailwind CSS\n  // Only load Tailwind CSS plugin if configuration file was found.\n  // This acts as a guard to ensure the project actually wants to use Tailwind CSS.\n  // The package may be unknowningly present due to a third-party transitive package dependency.\n  if (tailwindConfigPath) {\n    let tailwindPackagePath;\n    try {\n      tailwindPackagePath = require.resolve('tailwindcss', { paths: [projectBasePath] });\n    } catch {\n      const relativeTailwindConfigPath = relative(projectBasePath, tailwindConfigPath);\n      log.warn(\n        `Tailwind CSS configuration file found (${relativeTailwindConfigPath})` +\n          ` but the 'tailwindcss' package is not installed.` +\n          ` To enable Tailwind CSS, please install the 'tailwindcss' package.`,\n      );\n    }\n\n    if (tailwindPackagePath) {\n      return require(tailwindPackagePath)({ config: tailwindConfigPath });\n    }\n  }\n}\n\nasync function initialize() {\n  const postCssPlugins = [];\n  if (postcssConfiguration) {\n    for (const [pluginName, pluginOptions] of postcssConfiguration.plugins) {\n      const { default: plugin } = await import(pluginName);\n\n      if (typeof plugin !== 'function' || plugin.postcss !== true) {\n        throw new Error(`Attempted to load invalid Postcss plugin: \"${pluginName}\"`);\n      }\n\n      postCssPlugins.push(plugin(pluginOptions));\n    }\n  } else {\n    const tailwinds = getTailwindPlugin();\n    if (tailwinds) {\n      postCssPlugins.push(tailwinds);\n      cacheDirectory = undefined;\n    }\n  }\n\n  if (postCssPlugins.length) {\n    postCssProcessor = postcss(postCssPlugins);\n  }\n\n  esbuild = new EsbuildExecutor();\n\n  // Return the render function for use\n  return render;\n}\n\n/**\n * Searches the provided contents for keywords that indicate Tailwind is used\n * within a stylesheet.\n */\nfunction hasTailwindKeywords(contents: string): boolean {\n  // TODO: use better search algorithm for keywords\n  return TAILWIND_KEYWORDS.some(keyword => contents.includes(keyword));\n}\n\n/**\n * The default export will be the promise returned by the initialize function.\n * This is awaited by piscina prior to using the Worker.\n */\nexport default initialize();\n"]}