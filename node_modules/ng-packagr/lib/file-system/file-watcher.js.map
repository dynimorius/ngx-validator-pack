{"version":3,"file":"file-watcher.js","sourceRoot":"","sources":["../../../src/lib/file-system/file-watcher.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,mDAAqC;AACrC,2BAA8B;AAC9B,2CAA6B;AAC7B,+BAA4C;AAC5C,kDAAoC;AACpC,wCAA+C;AAU/C,SAAgB,eAAe,CAC7B,SAA4B,EAC5B,eAAoC,EAAE;IAKtC,GAAG,CAAC,KAAK,CAAC,mCAAmC,SAAS,mBAAmB,YAAY,EAAE,CAAC,CAAC;IAEzF,MAAM,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,EAAE,EAAE;QAC/B,aAAa,EAAE,IAAI;QACnB,OAAO,EAAE,CAAC,GAAG,YAAY,EAAE,QAAQ,EAAE,eAAe,CAAC;QACrD,UAAU,EAAE,IAAI;KACjB,CAAC,CAAC;IAEH,MAAM,OAAO,GAAG,IAAA,aAAQ,GAAE,KAAK,OAAO,CAAC;IACvC,MAAM,gBAAgB,GAAG,CAAC,KAAyB,EAAE,QAAgB,EAAE,QAAoC,EAAE,EAAE;QAC7G,GAAG,CAAC,KAAK,CAAC,+BAA+B,KAAK,WAAW,QAAQ,EAAE,CAAC,CAAC;QAErE,IAAI,OAAO,EAAE,CAAC;YACZ,oEAAoE;YACpE,0DAA0D;YAC1D,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YACxB,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;QACtB,CAAC;QAED,IAAI,KAAK,KAAK,WAAW,IAAI,KAAK,KAAK,QAAQ,EAAE,CAAC;YAChD,2GAA2G;YAC3G,OAAO;QACT,CAAC;QAED,QAAQ,CAAC,IAAI,CAAC;YACZ,QAAQ,EAAE,IAAA,qBAAc,EAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAChD,KAAK;SACN,CAAC,CAAC;IACL,CAAC,CAAC;IAEF,OAAO;QACL,OAAO,EAAE,KAAK;QACd,YAAY,EAAE,IAAI,iBAAU,CAAC,QAAQ,CAAC,EAAE;YACtC,KAAK,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC,KAAyB,EAAE,QAAgB,EAAE,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;YAE9G,kEAAkE;YAClE,OAAO,GAAG,EAAE,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QAC7B,CAAC,CAAC;KACH,CAAC;AACJ,CAAC;AA9CD,0CA8CC","sourcesContent":["import * as chokidar from 'chokidar';\nimport { platform } from 'os';\nimport * as path from 'path';\nimport { Observable, Observer } from 'rxjs';\nimport * as log from '../utils/log';\nimport { ensureUnixPath } from '../utils/path';\n\ntype AllFileWatchEvents = 'change' | 'unlink' | 'add' | 'unlinkDir' | 'addDir';\nexport type FileWatchEvent = Exclude<AllFileWatchEvents, 'unlinkDir' | 'addDir'>;\n\nexport interface FileChangedEvent {\n  filePath: string;\n  event: FileWatchEvent;\n}\n\nexport function createFileWatch(\n  basePaths: string | string[],\n  ignoredPaths: (RegExp | string)[] = [],\n): {\n  watcher: chokidar.FSWatcher;\n  onFileChange: Observable<FileChangedEvent>;\n} {\n  log.debug(`Watching for changes: basePath: ${basePaths}, ignoredPaths: ${ignoredPaths}`);\n\n  const watch = chokidar.watch([], {\n    ignoreInitial: true,\n    ignored: [...ignoredPaths, /\\.map$/, /.tsbuildinfo$/],\n    persistent: true,\n  });\n\n  const isLinux = platform() === 'linux';\n  const handleFileChange = (event: AllFileWatchEvents, filePath: string, observer: Observer<FileChangedEvent>) => {\n    log.debug(`Watch: Path changed. Event: ${event}, Path: ${filePath}`);\n\n    if (isLinux) {\n      // Workaround for Linux where chokidar will not handle future events\n      // for files that were unlinked and immediately recreated.\n      watch.unwatch(filePath);\n      watch.add(filePath);\n    }\n\n    if (event === 'unlinkDir' || event === 'addDir') {\n      // we don't need to trigger on directory removed or renamed as chokidar will fire the changes for each file\n      return;\n    }\n\n    observer.next({\n      filePath: ensureUnixPath(path.resolve(filePath)),\n      event,\n    });\n  };\n\n  return {\n    watcher: watch,\n    onFileChange: new Observable(observer => {\n      watch.on('all', (event: AllFileWatchEvents, filePath: string) => handleFileChange(event, filePath, observer));\n\n      // eslint-disable-next-line @typescript-eslint/no-misused-promises\n      return () => watch.close();\n    }),\n  };\n}\n"]}