{"version":3,"file":"cache.js","sourceRoot":"","sources":["../../../src/lib/utils/cache.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,iDAAmC;AACnC,mCAAoC;AACpC,oCAAuC;AACvC,yCAA2C;AAE3C,IAAI,gBAAoC,CAAC;AACzC,IAAI,CAAC;IACH,gBAAgB,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC,OAAO,CAAC;AAC3D,CAAC;AAAC,MAAM,CAAC;IACP,WAAW;IACX,gBAAgB,GAAG,OAAO,CAAC,uBAAuB,CAAC,CAAC,OAAO,CAAC;AAC9D,CAAC;AAED,IAAI,kBAAsC,CAAC;AAEpC,KAAK,UAAU,WAAW,CAAC,GAAG,gBAA0B;IAC7D,IAAI,kBAAkB,KAAK,SAAS,EAAE,CAAC;QACrC,kBAAkB,GAAG,CAAC,MAAM,IAAA,wBAAa,GAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC;IAC5D,CAAC;IAED,OAAO,IAAA,mBAAU,EAAC,MAAM,CAAC;SACtB,MAAM,CAAC,gBAAgB,CAAC;SACxB,MAAM,CAAC,kBAAkB,CAAC;SAC1B,MAAM,CAAC,gBAAgB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAClC,MAAM,CAAC,KAAK,CAAC,CAAC;AACnB,CAAC;AAVD,kCAUC;AAEM,KAAK,UAAU,cAAc,CAAC,SAAiB,EAAE,GAAW;IACjE,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;IACrD,IAAI,KAAK,EAAE,CAAC;QACV,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,IAAA,aAAQ,EAAC,KAAK,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;IACxD,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC;AAPD,wCAOC;AAEM,KAAK,UAAU,cAAc,CAAC,SAAiB,EAAE,GAAW,EAAE,OAAe;IAClF,MAAM,OAAO,CAAC,GAAG,CAAC,SAAS,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;AAC7C,CAAC;AAFD,wCAEC","sourcesContent":["import * as cacache from 'cacache';\nimport { createHash } from 'crypto';\nimport { readFile } from '../utils/fs';\nimport { ngCompilerCli } from './load-esm';\n\nlet ngPackagrVersion: string | undefined;\ntry {\n  ngPackagrVersion = require('../../package.json').version;\n} catch {\n  // dev path\n  ngPackagrVersion = require('../../../package.json').version;\n}\n\nlet compilerCliVersion: string | undefined;\n\nexport async function generateKey(...valuesToConsider: string[]): Promise<string> {\n  if (compilerCliVersion === undefined) {\n    compilerCliVersion = (await ngCompilerCli()).VERSION.full;\n  }\n\n  return createHash('sha1')\n    .update(ngPackagrVersion)\n    .update(compilerCliVersion)\n    .update(valuesToConsider.join(':'))\n    .digest('hex');\n}\n\nexport async function readCacheEntry(cachePath: string, key: string): Promise<any> {\n  const entry = await cacache.get.info(cachePath, key);\n  if (entry) {\n    return JSON.parse(await readFile(entry.path, 'utf8'));\n  }\n\n  return undefined;\n}\n\nexport async function saveCacheEntry(cachePath: string, key: string, content: string): Promise<void> {\n  await cacache.put(cachePath, key, content);\n}\n"]}