{"version":3,"file":"path.js","sourceRoot":"","sources":["../../../src/lib/utils/path.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,+CAAiC;AAEjC,MAAM,WAAW,GAAG,IAAI,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;AAC/D,MAAM,mBAAmB,GAAG,IAAI,GAAG,EAAkB,CAAC;AACtD,MAAM,UAAU,GAAG,OAAO,CAAC,QAAQ,KAAK,OAAO,CAAC;AAEnC,QAAA,cAAc,GAAG,UAAU;IACtC,CAAC,CAAC,CAAC,IAAa,EAAiB,EAAE;QAC/B,IAAI,CAAC,IAAI,EAAE,CAAC;YACV,OAAO,IAAI,CAAC;QACd,CAAC;QAED,MAAM,SAAS,GAAG,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;QAChD,IAAI,SAAS,EAAE,CAAC;YACd,OAAO,SAAS,CAAC;QACnB,CAAC;QAED,2FAA2F;QAC3F,iEAAiE;QACjE,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,EAAE,QAAQ,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QACrE,mBAAmB,CAAC,GAAG,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC;QAE9C,OAAO,cAAc,CAAC;IACxB,CAAC;IACH,CAAC,CAAC,CAAC,IAAa,EAAE,EAAE,CAAC,IAAI,CAAC","sourcesContent":["import * as nodePath from 'path';\n\nconst PATH_REGEXP = new RegExp('\\\\' + nodePath.win32.sep, 'g');\nconst ensureUnixPathCache = new Map<string, string>();\nconst IS_WINDOWS = process.platform === 'win32';\n\nexport const ensureUnixPath = IS_WINDOWS\n  ? (path?: string): string | null => {\n      if (!path) {\n        return null;\n      }\n\n      const cachePath = ensureUnixPathCache.get(path);\n      if (cachePath) {\n        return cachePath;\n      }\n\n      // we use a regex instead of the character literal due to a bug in some versions of node.js\n      // the path separator needs to be preceded by an escape character\n      const normalizedPath = path.replace(PATH_REGEXP, nodePath.posix.sep);\n      ensureUnixPathCache.set(path, normalizedPath);\n\n      return normalizedPath;\n    }\n  : (path?: string) => path;\n"]}