{"version":3,"file":"fs.js","sourceRoot":"","sources":["../../../src/lib/utils/fs.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,uCAAyB;AACzB,+BAA+B;AAC/B,+BAAiC;AAEpB,QAAA,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC;AAChC,QAAA,SAAS,GAAG,EAAE,CAAC,QAAQ,CAAC,SAAS,CAAC;AAClC,QAAA,MAAM,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC;AAC5B,QAAA,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC;AAC1B,QAAA,IAAI,GAAG,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC;AACxB,QAAA,KAAK,GAAG,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC;AAE7B,KAAK,UAAU,MAAM,CAAC,IAAiB;IAC5C,IAAI,CAAC;QACH,MAAM,IAAA,cAAM,EAAC,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC;QAEtC,OAAO,IAAI,CAAC;IACd,CAAC;IAAC,MAAM,CAAC;QACP,OAAO,KAAK,CAAC;IACf,CAAC;AACH,CAAC;AARD,wBAQC;AAED,MAAM,MAAM,GAAG,IAAA,gBAAS,EAAC,EAAE,CAAC,QAAQ,CAAC,CAAC;AAC/B,KAAK,UAAU,QAAQ,CAAC,GAAW,EAAE,IAAY;IACtD,MAAM,GAAG,GAAG,IAAA,cAAO,EAAC,IAAI,CAAC,CAAC;IAC1B,IAAI,CAAC,CAAC,MAAM,MAAM,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC;QACzB,MAAM,IAAA,aAAK,EAAC,GAAG,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,CAAC,CAAC;IACxC,CAAC;IAED,MAAM,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,EAAE,CAAC,SAAS,CAAC,gBAAgB,CAAC,CAAC;AACzD,CAAC;AAPD,4BAOC","sourcesContent":["import * as fs from 'fs';\nimport { dirname } from 'path';\nimport { promisify } from 'util';\n\nexport const readFile = fs.promises.readFile;\nexport const writeFile = fs.promises.writeFile;\nexport const access = fs.promises.access;\nexport const mkdir = fs.promises.mkdir;\nexport const stat = fs.promises.stat;\nexport const rmdir = fs.promises.rm;\n\nexport async function exists(path: fs.PathLike): Promise<boolean> {\n  try {\n    await access(path, fs.constants.F_OK);\n\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nconst cpFile = promisify(fs.copyFile);\nexport async function copyFile(src: string, dest: string): Promise<void> {\n  const dir = dirname(dest);\n  if (!(await exists(dir))) {\n    await mkdir(dir, { recursive: true });\n  }\n\n  await cpFile(src, dest, fs.constants.COPYFILE_FICLONE);\n}\n"]}