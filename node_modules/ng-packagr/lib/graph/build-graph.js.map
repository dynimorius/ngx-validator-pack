{"version":3,"file":"build-graph.js","sourceRoot":"","sources":["../../../src/lib/graph/build-graph.ts"],"names":[],"mappings":";;;AACA,+CAAwD;AAqBxD;;;GAGG;AACH,MAAa,UAAU;IAAvB;QACU,UAAK,GAAG,IAAI,GAAG,EAAgB,CAAC;IAwD1C,CAAC;IArDQ,GAAG,CAAC,KAAoB;QAC7B,IAAI,KAAK,YAAY,KAAK,EAAE,CAAC;YAC3B,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QAC3C,CAAC;aAAM,CAAC;YACN,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACrB,CAAC;QAED,OAAO,IAAI,CAAC;IACd,CAAC;IAEO,MAAM,CAAC,IAAU;QACvB,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC;YAC7B,+BAA+B;YAC/B,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;YACzC,OAAO,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;QACxC,CAAC;QAED,IAAI,IAAI,CAAC,OAAO,IAAI,IAAI,CAAC,GAAG,CAAC,UAAU,CAAC,yBAAiB,CAAC,EAAE,CAAC;YAC3D,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,yBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;QAC7D,CAAC;QAED,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IACjC,CAAC;IAEM,GAAG,CAAC,GAAW;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IAEM,GAAG,CAAC,GAAW;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC7B,CAAC;IAEM,OAAO;QACZ,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC;QAEnC,OAAO,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAC5B,CAAC;IAEM,IAAI,CAAC,EAAmB;QAC7B,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACjC,CAAC;IAEM,MAAM,CAAwB,EAA6B;QAChE,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,MAAM,CAAC,EAAE,CAAQ,CAAC;IAC1C,CAAC;IAEM,IAAI,CAAwB,EAA6B;QAC9D,OAAO,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,EAAE,CAAkB,CAAC;IAClD,CAAC;IAED,IAAI,IAAI;QACN,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;CACF;AAzDD,gCAyDC","sourcesContent":["import { FSWatcher } from 'chokidar';\nimport { URL_PROTOCOL_FILE } from '../ng-package/nodes';\nimport { Node } from './node';\n\nexport type SimplePredicate<T = Node> = {\n  (value: T, index: number): boolean;\n  and?: (criteria: SimplePredicate<T>) => SimplePredicate<T>;\n};\n\nexport type ComplexPredicate<T = Node, R extends T = T> =\n  | SimplePredicate<T>\n  | {\n      (value: T, index: number): value is R;\n      and?: (criteria: ComplexPredicate<T, R>) => ComplexPredicate<T, R>;\n    };\n\nexport interface Traversable<T> {\n  filter<R extends T = T>(by: ComplexPredicate<T, R>): R[];\n  find<R extends T = T>(by: ComplexPredicate<T, R>): R | undefined;\n  some(by: SimplePredicate<T>): boolean;\n}\n\n/**\n * A tree of source files. Eventually, it's a graph. Ideally, it's an acyclic directed graph.\n * Technically, it's implemented as a map-like collection with references between map entries.\n */\nexport class BuildGraph implements Traversable<Node> {\n  private store = new Map<string, Node>();\n  watcher?: FSWatcher;\n\n  public put(value: Node | Node[]) {\n    if (value instanceof Array) {\n      value.forEach(node => this.insert(node));\n    } else {\n      this.insert(value);\n    }\n\n    return this;\n  }\n\n  private insert(node: Node) {\n    if (this.store.has(node.url)) {\n      // Clean up dependee references\n      const oldNode = this.store.get(node.url);\n      oldNode['_dependees'].delete(oldNode);\n    }\n\n    if (this.watcher && node.url.startsWith(URL_PROTOCOL_FILE)) {\n      this.watcher.add(node.url.slice(URL_PROTOCOL_FILE.length));\n    }\n\n    this.store.set(node.url, node);\n  }\n\n  public get(url: string): Node {\n    return this.store.get(url);\n  }\n\n  public has(url: string): boolean {\n    return this.store.has(url);\n  }\n\n  public entries(): Node[] {\n    const values = this.store.values();\n\n    return Array.from(values);\n  }\n\n  public some(by: SimplePredicate): boolean {\n    return this.entries().some(by);\n  }\n\n  public filter<T extends Node = Node>(by: ComplexPredicate<Node, T>): T[] {\n    return this.entries().filter(by) as T[];\n  }\n\n  public find<T extends Node = Node>(by: ComplexPredicate<Node, T>): T | undefined {\n    return this.entries().find(by) as T | undefined;\n  }\n\n  get size(): number {\n    return this.store.size;\n  }\n}\n"]}