{"version":3,"file":"dynamize-ngx-validator-pack.mjs","sources":["../../../projects/ngx-validator-pack/src/lib/components/validation-error/validation-error.component.ts","../../../projects/ngx-validator-pack/src/lib/components/validation-error/validation-error.component.html","../../../projects/ngx-validator-pack/src/lib/directives/show-validation.directive.ts","../../../projects/ngx-validator-pack/src/lib/interfaces/validation-config.interface.ts","../../../projects/ngx-validator-pack/src/lib/helpers/errors.ts","../../../projects/ngx-validator-pack/src/lib/validations/cross-field-validations.ts","../../../projects/ngx-validator-pack/src/lib/validators/reactive-forms/cross-field-validators.ts","../../../projects/ngx-validator-pack/src/lib/constant/regex.ts","../../../projects/ngx-validator-pack/src/lib/helpers/numbers.ts","../../../projects/ngx-validator-pack/src/lib/helpers/date.ts","../../../projects/ngx-validator-pack/src/lib/helpers/regexp.ts","../../../projects/ngx-validator-pack/src/lib/validations/validations.ts","../../../projects/ngx-validator-pack/src/lib/validators/reactive-forms/prebuilt-validators.ts","../../../projects/ngx-validator-pack/src/lib/validators/reactive-forms/reactive-forms-validators.ts","../../../projects/ngx-validator-pack/src/lib/validators/template-driven-forms/cross-field-td-validators.ts","../../../projects/ngx-validator-pack/src/lib/validators/template-driven-forms/template-driven-form-validators.ts","../../../projects/ngx-validator-pack/src/lib/decorators/validator-input.ts","../../../projects/ngx-validator-pack/src/lib/validators/template-driven-forms/prebuilt-tdf-validators.ts","../../../projects/ngx-validator-pack/src/public-api.ts","../../../projects/ngx-validator-pack/src/dynamize-ngx-validator-pack.ts"],"sourcesContent":["import { ChangeDetectorRef, Component, DoCheck, ElementRef, Input, OnInit, Renderer2, ViewChild } from '@angular/core'\n\n/**\n * @internal\n * @description\n * A component showing the validation error to the user\n */\n@Component({\n  selector: '',\n  standalone: true,\n  imports: [],\n  templateUrl: './validation-error.component.html',\n  styleUrl: './validation-error.component.css',\n})\nexport class ValidationErrorComponent implements DoCheck{\n  content!: HTMLDivElement;\n  _class!: string;\n  @ViewChild('errorContent') contentRef!: ElementRef;\n\n  @Input() error!: string\n  @Input() zIndex!: string | number;\n  @Input() set class(css: string | undefined | null) {\n    this._class = css ? css : 'dmz-validation-content'\n  };\n  @Input() style!: string;\n\n  constructor(\n    private readonly renderer: Renderer2,\n    private changeDetectorRef: ChangeDetectorRef\n  ) {}\n\n  ngDoCheck(): void {\n    if(!this.content) {\n      this.changeDetectorRef.detectChanges();\n      this.content = this.contentRef.nativeElement;\n    }\n\n    this.renderer.setStyle(this.content, 'zIndex', `${this.zIndex}`);\n  }\n}\n","<div #errorContent [class]=\"_class\" [style]=\"style\">\n  <span>{{ error }}</span>\n</div>\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport {\n  Directive,\n  ElementRef,\n  Input,\n  OnDestroy,\n  OnInit,\n  Renderer2,\n  ViewContainerRef,\n} from '@angular/core'\nimport { FormControl, NgControl, ValidationErrors } from '@angular/forms'\nimport { Subscription } from 'rxjs'\nimport { ValidationErrorComponent } from '../components/validation-error/validation-error.component'\n\n/**\n * @publicApi\n * @description\n * A directive which will show a validation error message to the\n * user.\n * @implementation\n * <input\n *  type=\"text\"\n *  formControlName=\"demoControlName\"\n *  showValidation\n *  [errorStyle]=\"{                  - Optional style input\n *    font_size: 'medium',              used for customizing the look\n *    color: '#ad03fc',\n *  }\"\n * />\n */\n@Directive({\n  selector: '[showValidation]',\n  standalone: true,\n})\nexport class ShowValidationDirective implements OnInit, OnDestroy {\n  controlSub: Subscription = new Subscription()\n  self!: HTMLElement\n  retrievedStyles!: CSSStyleDeclaration\n\n  @Input() vClass!: string\n  @Input() vStyle!: string\n\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private readonly elementRef: ElementRef,\n    private renderer: Renderer2,\n    private readonly control: NgControl\n  ) {}\n\n  ngOnInit(): void {\n    const formControl = this.control.control as FormControl\n    this.self = this.elementRef.nativeElement\n    this.retrievedStyles = getComputedStyle(this.self)\n\n    this.controlSub.add(\n      formControl.statusChanges.subscribe((status): void => {\n        this.hideError()\n        if (status === 'INVALID') {\n          this.showError(formControl.errors)\n        }\n      })\n    )\n  }\n\n  ngOnDestroy(): void {\n    this.controlSub.unsubscribe()\n  }\n\n  showError(errors: ValidationErrors | null): void {\n    const valErrorComponentRef = this.viewContainerRef.createComponent(\n      ValidationErrorComponent\n    )\n    valErrorComponentRef.setInput('error', this.getValidationMessage(errors))\n    const indexNum = Number.parseInt(this.retrievedStyles.zIndex)\n    const zIndex = Number.isNaN(indexNum) ? 1 : indexNum\n    this.renderer.setStyle(this.self, 'zIndex', `${zIndex}`)\n    valErrorComponentRef.setInput('zIndex', `${zIndex - 1}`)\n    valErrorComponentRef.setInput('class', this.vClass)\n    valErrorComponentRef.setInput('style', this.vStyle)\n  }\n\n  hideError(): void {\n    this.viewContainerRef.clear()\n  }\n\n  getValidationMessage(errors: ValidationErrors | null): string {\n    return errors ? Object.values(errors)[0] : 'Invalid Input.'\n  }\n}\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { ComparisonOperations, RegExpLogicalOperations } from \"../types\";\n\n/**\n * @internal\n * @description\n * An interface representing the base of the value which can be\n * passed to Template Form Validator Directives.\n */\nexport interface BaseValidationConfig {\n  error?: string;\n  errorName?: string;\n}\n\n/**\n * @publicApi\n * @description\n * An interface representing the value which can be passed to\n * regexpValidation Directive\n * {@link RegExpValidatorDirective}\n */\nexport interface RegExpValidationConfig extends BaseValidationConfig {\n  regExp: RegExp;\n  logic?: RegExpLogicalOperations;\n}\n\n/**\n * @publicApi\n * @description\n * An interface representing the value which can be passed to\n * date comparison directives.\n * {@link EarlierThenValidatorDirective}\n * {@link LaterThenValidatorDirective}\n */\nexport interface DateValidationConfig extends BaseValidationConfig {\n  date: Date;\n}\n\n/**\n * @publicApi\n * @description\n * An interface representing the value which can be passed to\n * compareToValidation Directive\n * {@link compareToValidation}\n */\nexport interface CompareValidationConfig extends BaseValidationConfig {\n  fieldName: string;\n  comparison: ComparisonOperations;\n}\n\n/**\n * @publicApi\n * @description\n * An interface representing the value which can be passed to\n * requiredWhenValidation Directive\n * {@link  RequiredWhenValidatorDirective}\n */\nexport interface ConditionalValidationConfig extends BaseValidationConfig {\n  conditional: (() => boolean) | boolean;\n}\n\n/**\n * @publicApi\n * @description\n * An interface representing the value which can be passed to\n * date link directives.\n * {@link LinkToValidatorDirective}\n * {@link LinkedToValidatorDirective}\n */\nexport interface LinkValidationConfig extends BaseValidationConfig {\n  link: string;\n}\n\n/**\n * @publicApi\n * @description\n * An interface representing the value which can be passed to\n * lengthValidation Directive\n * {@link LengthValidatorDirective}\n */\nexport interface LengthValidationConfig extends BaseValidationConfig {\n  length: number;\n  comparison: ComparisonOperations;\n}\n\n/**\n * @publicApi\n * @description\n * An interface representing the value which can be passed to\n * wordCountValidation Directive\n * {@link }\n */\nexport interface CountValidationConfig extends BaseValidationConfig {\n  count: number;\n  comparison: ComparisonOperations;\n}\n\n/**\n * @publicApi\n * @description\n * An interface representing the value which can be passed to\n * rangeValidation Directive\n * {@link RangeValidatorDirective}\n */\nexport interface RangeValidationConfig extends BaseValidationConfig {\n  start: number;\n  end: number;\n}","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { AbstractControl, ValidationErrors } from \"@angular/forms\";\n\n/**\n * @internal\n * @description\n * Sets an error on a given control\n *\n * @param control                     - FromControl / AbstractControl to set the error to\n * @param error                       - error content { [key: string]: unknown }\n */\nexport const setErrors = (\n  control: AbstractControl,\n  error: ValidationErrors\n): void => {\n  control.setErrors({ ...control.errors, ...error });\n};\n\n/**\n * @internal\n * @description\n * Removes errors on a given control\n *\n * @param control                     - FromControl / AbstractControl from which\n *                                      to remove error\n * @param keys                        - array of error names\n */\nexport const removeErrors = (\n  control: AbstractControl,\n  keys: string[]\n): void => {\n  const remainingErrors: ValidationErrors = keys.reduce(\n    (errors: ValidationErrors, key: string): ValidationErrors => {\n      delete errors[key];\n      return errors;\n    },\n    { ...control.errors }\n  );\n\n  control.setErrors(\n    Object.keys(remainingErrors).length > 0 ? remainingErrors : null\n  );\n};\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { AbstractControl, ValidationErrors } from \"@angular/forms\";\nimport { removeErrors, setErrors } from \"../helpers/errors\";\n\n/**\n * @internal\n * @description\n * A validation function which assigns a required error to the controls with a name that \n * was specified in the requiredControlName filed of the config parameter if the control \n * with a name specified in the controlToCheckName parameter has no value.\n *\n * @param control                      - form group\n * @param config                       - config parameter, consists of a\n *                                       required field name, a field name to check and optional \n *                                       error string\n * @returns {ValidationErrors | null}   - Validation error\n */\nexport const requiredIfValidation = (\n  control: AbstractControl,\n  config: {\n    required: string;\n    check: string;\n    error?: string;\n  }\n): ValidationErrors | null => {\n  const required = control?.get(config.required) as AbstractControl;\n  const toCheck = control?.get(config.check) as AbstractControl;\n  if (required?.value || !toCheck?.value) {\n    removeErrors(required, [\"required\"]);\n    return null;\n  } else {\n    const errorVal =\n      config.error ??\n      `Required is ${config.required} when having ${config.check}.`;\n    setErrors(required, { required: errorVal });\n    return { [errorVal]: true };\n  }\n};\n\n/**\n * @internal\n * @description\n * A validation function which assigns a required error to the controls with a name that \n * was specified in the requiredControlName field of the config parameter if the control \n * with a name specified in the controlToCheckName parameter has a value.\n *\n * @param control                      - form group\n * @param config                       - config parameter, consists of a\n *                                       required field name, a field name to check and optional \n *                                       error string\n * @returns {ValidationErrors | null}   - Validation error\n */\nexport const requiredIfNotValidation = (\n  control: AbstractControl,\n  config: {\n    required: string;\n    check: string;\n    error?: string;\n  }\n): ValidationErrors | null => {\n  const required = control?.get(config.required) as AbstractControl;\n  const toCheck = control?.get(config.check) as AbstractControl;\n  if (required?.value || toCheck?.value) {\n    removeErrors(required, [\"required\"]);\n    return null;\n  } else {\n    const errorVal =\n      config.error ??\n      `Required is ${config.required} when not having ${config.check}.`;\n    setErrors(required, { required: errorVal });\n    return { [errorVal]: true };\n  }\n};\n\n/**\n * @internal\n * @description\n * A validation function which assigns a required error to the controls with a name that \n * was specified in the requiredControlName field of the config parameter nether that control\n * or the control with a name specified in the controlToCheckName parameter has a value.\n *\n * @param control                      - form group\n * @param config                       - config parameter, consists of a\n *                                       required field name, a field name to check and optional \n *                                       error string\n * @returns {ValidationErrors | null}   - Validation error\n */\nexport const requiredEtherValidation = (\n  control: AbstractControl,\n  config: {\n    required: string;\n    check: string;\n    error?: string;\n  }\n): ValidationErrors | null => {\n  const required = control?.get(config.required) as AbstractControl;\n  const toCheck = control?.get(config.check) as AbstractControl;\n  if (required?.value || toCheck?.value) {\n    removeErrors(required, [\"required\"]);\n    removeErrors(toCheck, [\"required\"]);\n    return null;\n  } else {\n    const errorVal =\n      config.error ??\n      `Required either ${config.required} or ${config.check}.`;\n    setErrors(required, { required: errorVal });\n    setErrors(toCheck, { required: errorVal });\n    return { [errorVal]: true };\n  }\n};\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\nimport {\n  requiredEtherValidation,\n  requiredIfNotValidation,\n  requiredIfValidation,\n} from \"../../validations/cross-field-validations\";\n\n/**\n * @publicApi\n * @description\n * Assigns a required error to the controls with a name was specified in the\n * first parameter if the control with a name specified in the second parameter\n * has no value.\n *\n * @param required                    - control name to receive the required error\n * @param check                       - control name who's value needs to be checked\n * @param error                       - error message - optional parameter\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const requiredIf = (\n  required: string,\n  check: string,\n  error?: string\n): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return requiredIfValidation(control, { required, check, error });\n  };\n};\n\n/**\n * @publicApi\n * @description\n * Assigns a required error to the controls with a name was specified in the\n * first parameter if the control with a name specified in the second parameter\n * has a value.\n *\n * @param required                    - control name to receive the required error\n * @param check                       - control name who's value needs to be checked\n * @param error                       - error message - optional parameter\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const requiredIfNot = (\n  required: string,\n  check: string,\n  error?: string\n): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return requiredIfNotValidation(control, { required, check, error });\n  };\n};\n\n/**\n * @publicApi\n * @description\n * Assigns a required error to both controls who's names are specified if nether one\n * has a value.\n *\n * @param required                    - name of the first control\n * @param check                       - name of the second control\n * @param error                       - error message - optional parameter\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const requiredEther = (\n  required: string,\n  check: string,\n  error?: string\n): ValidatorFn => {\n  return (control: AbstractControl): ValidationErrors | null => {\n    return requiredEtherValidation(control, { required, check, error });\n  };\n};\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\n// @internal Checks id an input in a format of Street number Street Name, City, State ZIP code\nexport const address = /^(\\d{1,}) [a-zA-Z0-9\\s]+(\\,)? [a-zA-Z]+(\\,)? [A-Z]{2} [0-9]{5,6}$/;\n// @internal Checks for date format YYYY-MM-dd\nexport const dateYYYY_MM_DD =\n  /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\n// Checks for date format  dd-MM-YYYY or dd.MM.YYYY or dd/MM/YYYY\n// @internal with check for leap year\nexport const dateDD_MM_YYYY =\n  /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/;\n// @internal Checks if input is an email\nexport const email =\n  /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\n// @internal Checks if input is in a IPv4 format\nexport const IPAddressV4 =\n  /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\n// @internal Checks if input is in a IPv6 format\nexport const IPAddressV6 =\n  /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/;\n// @internal Checks if input is in a IPv4 or IPv6 format\nexport const IPAddressV4AndV6 =\n  /((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))/;\n// @internal Checks if an input consists of letters only\nexport const lettersOnly = /^[A-Za-z]+$/;\n// @internal Checks if an input has letters \nexport const hasLetters = /[a-zA-Z]/;\n// @internal Checks if an input has lowercase letters \nexport const hasLowercase = /[a-z]/;\n// @internal Checks if an input has uppercase letters \nexport const hasUppercase = /[A-Z]/;\n// @internal Checks if the input consists of letters, periods, hyphens and spaces\nexport const lettersPeriodsHyphensAndSpaces = /^[a-zA-Z\\s.-]+$/;\n// @internal Checks if input contains < or >;\nexport const greaterOrLessThen = /(?=.*[<>])/;\n// @internal Checks if input contains any special characters\nexport const noSpecial = /^[A-Za-z0-9 ]+$/;\n// @internal Checks if an input consists of numbers only\nexport const numbersOnly = /^\\d+$/;\n// @internal Checks if an input has numbers\nexport const hasNumbers = /\\d/;\n// @internal Checks if input is in passport format\nexport const passport = /^[A-PR-WY][1-9]\\d\\s?\\d{4}[1-9]$/;\n// Checks if input consist of at least 1 lowercase letter, 1 uppercase letter,\n// @internal 1 number, 1 special character and has length of at least 8 characters\nexport const passwordStrength =\n  /(?=(.*[0-9]))(?=.*[\\!@#$%^&*()\\\\[\\]{}\\-_+=~`|:;\"'<>,./?])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*)).{8,}/;\n// @internal Checks for a (000) 000 0000 phone format\nexport const phoneNumber = /^(\\()?[2-9]{1}\\d{2}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/;\n// @internal Checks for a single space character\nexport const space = /[\\s]/;\n// @internal Restrict only spaces, spaces at the beginning and end of the field\nexport const spaceRestriction = /^\\S$|^\\S[\\s\\S]*\\S$/;\n// @internal Checks if input is in an Social Security Number format\nexport const ssn =\n  /^((?!219-09-9999|078-05-1120)(?!666|000|9\\d{2})\\d{3}-(?!00)\\d{2}-(?!0{4})\\d{4})|((?!219 09 9999|078 05 1120)(?!666|000|9\\d{2})\\d{3} (?!00)\\d{2} (?!0{4})\\d{4})|((?!219099999|078051120)(?!666|000|9\\d{2})\\d{3}(?!00)\\d{2}(?!0{4})\\d{4})$/;\n// @internal Checks for Time Format HH:MM 12-hour with optional leading 0\nexport const timeHH_MM_12 = /((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))/;\n// @internal Checks for Time Format HH:MM 24-hour with optional leading 0\nexport const timeHH_MM_24 = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;\n// @internal Checks for Time Format HH:MM:SS 24-hour\nexport const timeHH_MM_SS_24 =\n  /(?:[01]\\d|2[0123]):(?:[012345]\\d):(?:[012345]\\d)/;\n// @internal Checks if input is a url\nexport const url =\n  /(http|ftp|https):\\/\\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/;\n// @internal Checks of a zip code in formats 00000 or 00000-0000\nexport const zipCode = /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/;\n\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { ComparisonOperations } from \"../types\";\n\n/**\n * @internal\n */\nexport const compare = (num1: number, num2: number, comparison: ComparisonOperations): boolean => {\n  const operations = {\n      '<': (a: number, b: number): boolean => a < b,\n      '>': (a: number, b: number): boolean => a > b,\n      '==': (a: number, b: number): boolean => a == b,\n      '===': (a: number, b: number): boolean => a === b,\n      '<=': (a: number, b: number): boolean => a <= b,\n      '>=': (a: number, b: number): boolean => a >= b,\n  }\n  return operations[comparison](num1, num2);\n}","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { ComparisonOperations } from \"../types\";\nimport { compare } from \"./numbers\";\n\n/**\n * @internal\n */\nconst prepareToCompare = (\n  date: Date | string | undefined | null,\n  bufferYears?: number\n): number => {\n  if (date) {\n    const p_Date = new Date(date);\n    const year = p_Date.getFullYear() + (bufferYears ?? 0);\n    const month = p_Date.getMonth() + 1;\n    const day = p_Date.getDate();\n    return Number.parseInt(\n      `${year}${month.toString().replace.length > 1 ? month : \"0\" + month}${\n        day.toString().length > 1 ? day : \"0\" + day\n      }`\n    );\n  } else {\n    return 0;\n  }\n};\n\n/**\n * @publicApi\n */\nexport const compareDates = (\n  date1: Date,\n  date2: Date,\n  operation: ComparisonOperations = \"===\"\n): boolean => {\n  return compare(prepareToCompare(date1), prepareToCompare(date2), operation);\n};\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { RegExpLogicalOperations } from \"../types\";\n\n/**\n * @internal\n */\nexport const test = (regexp: RegExp, value: string, logic: RegExpLogicalOperations): boolean => {\n  const operations = {\n    '!': (): boolean => !regexp.test(value),\n    '!!': (): boolean => regexp.test(value),\n    'match': (): boolean => !!regexp.exec(value)\n  };\n\n  return operations[logic]();\n}","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { AbstractControl, ValidationErrors } from \"@angular/forms\";\nimport { compareDates } from \"../helpers/date\";\nimport { compare } from \"../helpers/numbers\";\nimport { SequenceConfig } from \"../interfaces/sequence-config.interface\";\nimport {\n  CompareValidationConfig,\n  ConditionalValidationConfig,\n  CountValidationConfig,\n  DateValidationConfig,\n  LengthValidationConfig,\n  LinkValidationConfig,\n  RangeValidationConfig,\n  RegExpValidationConfig,\n} from \"../interfaces/validation-config.interface\";\nimport { test } from \"../helpers/regexp\";\n\n/**\n * @internal\n * @description\n * A validation function which preforms a RegEx check on value in the\n * given FromControl / AbstractControl.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       regexp to check and optional error and\n *                                       error name string\n * @returns {ValidationErrors | null}  - Validation error\n */\nexport const regexpValidation = (\n  control: AbstractControl,\n  config: RegExpValidationConfig\n): ValidationErrors | null => {\n  const error =\n    config.error ?? \"This control did not match a given regular expression.\";\n  const errors: ValidationErrors = { [config.errorName ?? \"regexp\"]: error };\n\n  return !control.value ||\n    test(config.regExp, control.value, config?.logic ?? \"!!\")\n    ? null\n    : errors;\n};\n\n/**\n * @internal\n * @description\n * A validation function which checks if the date in the given\n * FromControl / AbstractControl is earlier then the value in the specified\n * FromControl / AbstractControl.\n *\n * @param {AbstractControl}                    - form control\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       date to check and optional error and\n *                                       error name string\n * @returns {ValidationErrors | null}   - Validation error\n */\nexport const earlierThenValidation = (\n  control: AbstractControl,\n  config: DateValidationConfig\n): ValidationErrors | null => {\n  const error =\n    config.error ??\n    `This control must have a value earlier then ${config.date}.`;\n  const errors: ValidationErrors = {\n    [config.errorName ?? \"earlierThen\"]: error,\n  };\n\n  return compareDates(control.value, config.date, \"<\") ? null : errors;\n};\n\n/**\n * @internal\n * @description\n * A validation function which checks if the date in the given\n * FromControl / AbstractControl is greater then the value in the specified\n * FromControl / AbstractControl.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       date to check and optional error and\n *                                       error name string\n * @returns {ValidationErrors | null}     - Validation error\n */\nexport const laterThenValidation = (\n  control: AbstractControl,\n  config: DateValidationConfig\n): ValidationErrors | null => {\n  const error =\n    config.error ?? `This control must have a value later then ${config.date}.`;\n  const errors: ValidationErrors = { [config.errorName ?? \"laterThen\"]: error };\n\n  return compareDates(control.value, config.date, \">\") ? null : errors;\n};\n\n/**\n * @internal\n * @description\n * A validation function which compares the date values of the given\n * FromControl / AbstractControl and specified FromControl / AbstractControl.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       field name to check and optional error and\n *                                       error name string\n * @returns {ValidationErrors | null}   - Validation error\n */\nexport const compareToValidation = (\n  control: AbstractControl,\n  config: CompareValidationConfig\n): ValidationErrors | null => {\n  const date = control.parent?.get(config.fieldName)?.value;\n  if (date) {\n    const error = config.error ?? `Value comparison with ${date} failed.`;\n    const errors: ValidationErrors = {\n      [config.errorName ?? \"dateComparison\"]: error,\n    };\n    \n    return control.value && compareDates(control.value, date, config.comparison)\n      ? null\n      : errors;\n  }\n  return null;\n};\n\n/**\n * @internal\n * @description\n * A validation function which returns a validation error if a condition is met.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       conditional function or boolean to check\n *                                       and optional error and error name string\n * @returns {ValidationErrors | null}   - Validation error\n */\nexport const requiredWhenValidation = (\n  control: AbstractControl,\n  config: ConditionalValidationConfig\n): ValidationErrors | null => {\n  const error = config.error ?? \"This control has a conditional set on it.\";\n  const errors: ValidationErrors = {\n    [config.errorName ?? \"required\"]: error,\n  };\n\n  const outcome =\n    typeof config.conditional === \"function\"\n      ? config.conditional()\n      : config.conditional;\n  return !control.value && outcome ? errors : null;\n};\n\n/**\n * @internal\n * @description\n * A validation function which returns a validation error if a given\n * FromControl / AbstractControl has no value and specified\n * FromControl / AbstractControl has it.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       field name to check and optional error and\n *                                       error name string\n * @returns {ValidationErrors | null}   - Validation error\n */\nexport const linkToValidation = (\n  control: AbstractControl,\n  config: LinkValidationConfig\n): ValidationErrors | null => {\n  const error = config.error ?? `This control has a link to ${config.link}.`;\n  const errors: ValidationErrors = { [config.errorName ?? \"linkTo\"]: error };\n  const linkedTo = control.parent?.get(config.link);\n\n  return !control?.value && !!linkedTo?.value ? errors : null;\n};\n\n/**\n * @internal\n * @description\n * A validation function which returns a validation error if a given\n * FromControl / AbstractControl has a value and specified\n * FromControl / AbstractControl does not.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       field name to check and optional error and\n *                                       error name string\n * @returns {ValidationErrors | null}  - Validation error\n */\nexport const linkedToValidation = (\n  control: AbstractControl,\n  config: LinkValidationConfig\n): ValidationErrors | null => {\n  const error = config.error ?? `This control is linked to ${config.link}.`;\n  const errors: ValidationErrors = { [config.errorName ?? \"linkTo\"]: error };\n  const link = control.parent?.get(config.link);\n\n  return !!control?.value && !link?.value ? errors : null;\n};\n\n/**\n * @internal\n * @description\n * A validation function which returns a validation error if a given\n * FromControl / AbstractControl has a value that fails a given\n * length comparison.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       length to check, comparison to preform \n *                                       and optional error and error name string\n * @returns {ValidationErrors | null}  - Validation error\n */\nexport const lengthValidation = (\n  control: AbstractControl,\n  config: LengthValidationConfig\n): ValidationErrors | null => {\n  const error =\n    config.error ?? `The required length should be ${config.comparison} ${config.length}.`;\n  const errors: ValidationErrors = { [config.errorName ?? \"length\"]: error };\n\n  return !!control?.value &&\n    compare(control?.value?.length, config.length, config.comparison ?? \"===\")\n    ? errors\n    : null;\n};\n\n/**\n * @internal\n * @description\n * A validation function which returns a validation error if a given\n * FromControl / AbstractControl value is not in a given range.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       start value to check and end value to check\n *                                       as well as optional error and error name string\n * @returns {ValidationErrors | null}  - Validation error\n */\nexport const rangeValidation = (\n  control: AbstractControl,\n  config: RangeValidationConfig\n): ValidationErrors | null => {\n  const error =\n    config.error ?? `Value must be in the range between ${config.start} and ${config.end}.`;\n  const errors: ValidationErrors = { [config.errorName ?? \"range\"]: error };\n\n  return !!control?.value &&\n    compare(control.value.length, config.start, \">=\") &&\n    compare(control.value.length, config.end, '<=' )\n    ? errors\n    : null;\n};\n\n/**\n * @internal\n * @description\n * A validation function which returns a validation error if a given\n * FromControl / AbstractControl has a value that fails a given\n * word count comparison.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       word count to check, comparison to preform \n *                                       and optional error and error name string\n * @returns {ValidationErrors | null}  - Validation error\n */\nexport const wordCountValidation = (\n  control: AbstractControl,\n  config: CountValidationConfig\n): ValidationErrors | null => {\n  const error =\n    config.error ?? `The required word count should be ${config.comparison} ${config.count}.`;\n  const errors: ValidationErrors = { [config.errorName ?? \"wordCount\"]: error };\n\n  const valueCount = control?.value?.split(' ');\n  return !!control?.value &&\n    compare(valueCount, config.count, config.comparison ?? \"===\")\n    ? errors\n    : null;\n}\n\n/**\n * @internal\n * @description\n * A validation function which returns a validation error if a given\n * FromControl / AbstractControl value is not in a given word count range.\n *\n * @param control                      - form control\n * @param config                       - config parameter, consists of a\n *                                       start value to check and end value to check\n *                                       as well as optional error and error name string\n * @returns {ValidationErrors | null}  - Validation error\n */\nexport const wordCountRangeValidation = (\n  control: AbstractControl,\n  config: RangeValidationConfig\n): ValidationErrors | null => {\n  const error =\n    config.error ?? `The word count must be in the range between ${config.start} and ${config.end}.`;\n  const errors: ValidationErrors = { [config.errorName ?? \"wordCountRange\"]: error };\n  const valueCount = control?.value?.split(' ');\n\n  return !!control?.value &&\n    compare(valueCount, config.start, \">=\") &&\n    compare(valueCount, config.end, '<=' )\n    ? errors\n    : null;\n};\n\n/**\n * @internal\n * @description\n * A validation function which returns a validation error if any\n * of the validations from the given sequence return an error.\n * The sequence order meters as the first fail will be returned.\n *\n * @param control                      - form control\n * @param sequence                     - sequence of configs that consists of\n *                                       validation functions and configs for those \n *                                       functions.\n * @returns {ValidationErrors | null}  - Validation error\n */\nexport const sequentialValidation = (\n  control: AbstractControl,\n  sequence: SequenceConfig[]\n): ValidationErrors | null => {\n  let validationError!: ValidationErrors;\n  const hasError = sequence.some((validation): boolean => {\n    const error = validation.validationFun(control, {\n      ...validation.validationFunConfig,\n    });\n    if (error) {\n      validationError = error;\n      return true;\n    }\n    return false;\n  });\n  return hasError ? validationError : null;\n};\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\nimport {\n  IPAddressV4,\n  IPAddressV4AndV6,\n  IPAddressV6,\n  address,\n  dateDD_MM_YYYY,\n  dateYYYY_MM_DD,\n  email,\n  lettersOnly,\n  noSpecial,\n  numbersOnly,\n  passport,\n  passwordStrength,\n  phoneNumber,\n  space,\n  spaceRestriction,\n  ssn,\n  timeHH_MM_12,\n  timeHH_MM_24,\n  timeHH_MM_SS_24,\n  url,\n  zipCode,\n} from \"../../constant/regex\";\nimport { regexpValidation } from \"../../validations/validations\";\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a proper address format\n * (Street number Street Name, City, State ZIP code)\n * Example: 3344 W Alameda Avenue, Lakewood, CO 80222\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const addressValidator =\n  (\n    errorName: string = \"address\",\n    error: string = \"Please input a value in a format of: Street number Street Name, City, State ZIP code.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: address,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl consists of only\n * alphabetic characters.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const alphabetOnlyValidator =\n  (\n    errorName: string = \"alphabetOnly\",\n    error: string = \"Only alphabetic characters are allowed.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: lettersOnly,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in one of the\n * following formats: dd-MM-YYYY, dd.MM.YYYY or dd/MM/YYYY.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const dateDD_MM_YYYYValidator =\n  (\n    errorName: string = \"dateDD_MM_YYYY\",\n    error: string = \"Please input a value one of the following formats: dd-MM-YYYY or dd.MM.YYYY or dd/MM/YYYY.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: dateDD_MM_YYYY,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\n * YYYY-MM-dd.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const dateYYYY_MM_DDValidator =\n  (\n    errorName: string = \"dateYYYY_MM_DD\",\n    error: string = \"Please input a value in a format: YYYY-MM-dd.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: dateYYYY_MM_DD,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\n * local-part@domain.com.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const emailValidator =\n  (\n    errorName: string = \"email\",\n    error: string = \"Please input a value in a format: local-part@domain.com.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: email,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in one of the\n * following formats: x.x.x.x or y:y:y:y:y:y:y:y.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const ipAddressValidator =\n  (\n    errorName: string = \"ipAddress\",\n    error: string = \"Please input a value one of the following formats: x.x.x.x or y:y:y:y:y:y:y:y.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: IPAddressV4AndV6,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\n * x.x.x.x.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const iPv4Validator =\n  (\n    errorName: string = \"iPv4\",\n    error: string = \"Please input a value in a format: x.x.x.x.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: IPAddressV4,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\n * y:y:y:y:y:y:y:y.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const iPv6Validator =\n  (\n    errorName: string = \"iPv6\",\n    error: string = \"Please input a value in a format: y:y:y:y:y:y:y:y.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: IPAddressV6,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl consists of only\n * numeric characters.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const numericsOnlyValidator =\n  (\n    errorName: string = \"numericsOnly\",\n    error: string = \"Only numeric characters are allowed.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: numbersOnly,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl has any special characters.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const noSpecialsValidator =\n  (\n    errorName: string = \"noSpecials\",\n    error: string = \"No special characters are allowed.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: noSpecial,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a proper passport format\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const passportValidator =\n  (\n    errorName: string = \"passport\",\n    error: string = \"Incorrect passport format.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: passport,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a strong password format\n * (Has at least 1 lowercase letter, 1 uppercase letter, 1 number, 1 special character and has\n * length of at least 8 characters).\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const passwordValidator =\n  (\n    errorName: string = \"password\",\n    error: string = \"The value has to contain at least 1 lowercase letter, 1 uppercase letter, 1 special character and has a length of 8.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: passwordStrength,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\n * (000) 000 0000.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const phoneNumberValidator =\n  (\n    errorName: string = \"phoneNumber\",\n    error: string = \"Please input a value in a format: (000) 000 0000.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: phoneNumber,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl consists of a single space\n * character.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const spaceValidator =\n  (\n    errorName: string = \"space\",\n    error: string = \"Space character is not allowed.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: space,\n      error,\n      errorName,\n      logic: \"!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl starts or ends with a\n * space character.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const spaceRestrictionValidator =\n  (\n    errorName: string = \"spaceRestriction\",\n    error: string = \"Value can not start or end with a space character.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: spaceRestriction,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in one of the\n * following formats: AAA-GGG-SSSS or AAAGGGSSSS.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const ssnValidator =\n  (\n    errorName: string = \"ssn\",\n    error: string = \"Please input a value one of the following formats: AAA-GGG-SSSS or AAAGGGSSSS.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: ssn,\n      error,\n      errorName,\n      logic: \"!!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a\n * Time Format HH:MM 12-hour with optional leading 0.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const timeHH_MM_12Validator =\n  (\n    errorName: string = \"timeHH_MM_12\",\n    error: string = \"Please input a value in a HH:MM 12-hour format.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: timeHH_MM_12,\n      error,\n      errorName,\n      logic: \"!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a\n * Time Format HH:MM 24-hour with optional leading 0.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const timeHH_MM_24Validator =\n  (\n    errorName: string = \"timeHH_MM_24\",\n    error: string = \"Please input a value in a HH:MM 24-hour format.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: timeHH_MM_24,\n      error,\n      errorName,\n      logic: \"!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a\n * Time Format HH:MM:SS 24-hour.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const timeHH_MM_SS_24Validator =\n  (\n    errorName: string = \"timeHH_MM_SS_24\",\n    error: string = \"Please input a value in a HH:MM:SS 24-hour format.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: timeHH_MM_SS_24,\n      error,\n      errorName,\n      logic: \"!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in a\n * correct url format.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const urlValidator =\n  (\n    errorName: string = \"url\",\n    error: string = \"Improper URL format.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: url,\n      error,\n      errorName,\n      logic: \"!\",\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if a value in the given FromControl / AbstractControl is in one of the\n * following formats: 00000 or 00000-0000.\n *\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const zipCodeValidator =\n  (\n    errorName: string = \"zipCode\",\n    error: string = \"Improper zip code format.\"\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, {\n      regExp: zipCode,\n      error,\n      errorName,\n      logic: \"!\",\n    });\n  };\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport {\n  lengthValidation,\n  rangeValidation,\n  wordCountRangeValidation,\n  wordCountValidation,\n} from \"./../../validations/validations\";\n\nimport { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\nimport { ComparisonOperations, RegExpLogicalOperations } from \"../../types\";\nimport {\n  compareToValidation,\n  earlierThenValidation,\n  laterThenValidation,\n  linkToValidation,\n  linkedToValidation,\n  regexpValidation,\n  requiredWhenValidation,\n} from \"../../validations/validations\";\n\n/**\n * @publicApi\n * @description\n * Preforms a RegEx check on value in the given FromControl / AbstractControl.\n *\n * @param regExp                      - Regular expression to check\n * @param logic                       - what kind of logic to preform !! = match, ! = not a match\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const regexpValidator =\n  (\n    regExp: RegExp,\n    logic: RegExpLogicalOperations,\n    errorName?: string,\n    error?: string\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return regexpValidation(control, { regExp, error, errorName, logic });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if the date in the given FromControl / AbstractControl is earlier then\n * the value in the specified FromControl / AbstractControl.\n *\n * @param date                        - Date to preform the check against\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const earlierThenValidator =\n  (date: Date, errorName?: string, error?: string): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return earlierThenValidation(control, { date, error, errorName });\n  };\n\n/**\n * @publicApi\n * @description\n * Checks if the date in the given FromControl / AbstractControl is greater then\n * the value in the specified FromControl / AbstractControl.\n *\n * @param date                        - Date to preform the check against\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const laterThenValidator =\n  (date: Date, errorName?: string, error?: string): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return laterThenValidation(control, { date, error, errorName });\n  };\n\n/**\n * @publicApi\n * @description\n * Compares the date values of the given FromControl / AbstractControl and\n * specified FromControl / AbstractControl.\n *\n * @param fieldName                   - name of the filed to compare against\n * @param comparison                  - comparison to preform\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const compareToValidator =\n  (\n    fieldName: string,\n    comparison: ComparisonOperations,\n    errorName?: string,\n    error?: string\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return compareToValidation(control, {\n      fieldName,\n      comparison,\n      error,\n      errorName,\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Returns a validation error if a condition is met.\n *\n * @param conditional                 - conditional function or a boolean value\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const requiredWhenValidator =\n  (\n    conditional: (() => boolean) | boolean,\n    errorName?: string,\n    error?: string\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return requiredWhenValidation(control, { conditional, error, errorName });\n  };\n\n/**\n * @publicApi\n * @description\n * Returns a validation error if a given FromControl / AbstractControl has no value\n * and specified FromControl / AbstractControl has it.\n *\n * @param link                        - name of the FromControl / AbstractControl to link to\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const linkToValidator =\n  (link: string, errorName?: string, error?: string): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return linkToValidation(control, { link, error, errorName });\n  };\n\n/**\n * @publicApi\n * @description\n * Returns a validation error if a given FromControl / AbstractControl has a value\n * and specified FromControl / AbstractControl does not.\n *\n * @param link                        - name of the FromControl / AbstractControl\n *                                      which a given FromControl / AbstractControl is linked to\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const linkedToValidator =\n  (link: string, errorName?: string, error?: string): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return linkedToValidation(control, { link, error, errorName });\n  };\n\n/**\n * @publicApi\n * @description\n * Returns a validation error if a given FromControl / AbstractControl has a value\n * that fails a given length comparison.\n *\n * @param length                      - numeric value of length to compere to\n * @param comparison                  - numeric value of a comparison to preform\n *                                      available options are:\n *                                        \"<\" , \">\" , \"==\" , \"===\" , \"<=\" and \">=\"\n *                                      default is: \"===\"\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const lengthValidator =\n  (\n    length: number,\n    comparison: ComparisonOperations = \"===\",\n    errorName?: string,\n    error?: string\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return lengthValidation(control, { length, comparison, error, errorName });\n  };\n\n/**\n * @publicApi\n * @description\n * Returns a validation error if a given FromControl / AbstractControl has a value\n * that is not in a given range.\n *\n * @param start                       - a minimum length value\n * @param end                         - a maximum length value\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const rangeValidator =\n  (\n    start: number,\n    end: number,\n    errorName?: string,\n    error?: string\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return rangeValidation(control, { start, end, error, errorName });\n  };\n\n/**\n * @publicApi\n * @description\n * Returns a validation error if a given FromControl / AbstractControl has a value\n * that fails a given word count comparison.\n *\n * @param count                       - numeric value of word count to compere to\n * @param comparison                  - numeric value of a comparison to preform\n *                                      available options are:\n *                                        \"<\" , \">\" , \"==\" , \"===\" , \"<=\" and \">=\"\n *                                      default is: \"===\"\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const wordCountValidator =\n  (\n    count: number,\n    comparison: ComparisonOperations = \"===\",\n    errorName?: string,\n    error?: string\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return wordCountValidation(control, {\n      count,\n      comparison,\n      error,\n      errorName,\n    });\n  };\n\n/**\n * @publicApi\n * @description\n * Returns a validation error if a given FromControl / AbstractControl has a value\n * whit a word count is not in a given range.\n *\n * @param start                       - a minimum word count value\n * @param end                         - a maximum word count value\n * @param errorName                   - optional parameter representing error name\n * @param error                       - optional parameter representing error value\n * @returns {ValidationErrors | null} - Validation error\n */\nexport const wordCountRangeValidator =\n  (\n    start: number,\n    end: number,\n    errorName?: string,\n    error?: string\n  ): ValidatorFn =>\n  (control: AbstractControl): ValidationErrors | null => {\n    return wordCountRangeValidation(control, { start, end, error, errorName });\n  };\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { Directive, Input } from \"@angular/core\";\nimport {\n  AbstractControl,\n  NG_VALIDATORS,\n  ValidationErrors,\n  Validator,\n} from \"@angular/forms\";\nimport {\n  requiredEtherValidation,\n  requiredIfNotValidation,\n  requiredIfValidation,\n} from \"../../validations/cross-field-validations\";\n\n/**\n * @publicApi\n * @description\n * A Directive that assigns a required error to the controls with a name was specified in the\n * first parameter if the control with a name specified in the second parameter\n * has no value.\n *\n * Has an input in which you specify the control which needs to receive the required error,\n * and the control which needs to be checked.\n *\n * @usageNotes\n * <form #exampleForm=\"ngForm\"\n *   [requiredIf]=\"{\n *      required: 'field_name',\n *      check: 'field_name'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[requiredIf]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: RequiredIfValidatorDirective,\n      multi: true,\n    },\n  ],\n  standalone: true,\n})\nexport class RequiredIfValidatorDirective implements Validator {\n  @Input(\"requiredIf\") controls!: {\n    required: string;\n    check: string;\n  };\n  validate(control: AbstractControl): ValidationErrors | null {\n    return requiredIfValidation(control, { ...this.controls });\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that assigns a required error to the controls with a name was specified in the\n * first parameter if the control with a name specified in the second parameter\n * has a value.\n *\n * Has an input in which you specify the control which needs to receive the required error,\n * and the control which needs to be checked.\n *\n * @usageNotes\n * <form #exampleForm=\"ngForm\"\n *   [requiredIfNot]=\"{\n *      required: 'field_name',\n *      check: 'field_name'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[requiredIfNot]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: RequiredIfNotValidatorDirective,\n      multi: true,\n    },\n  ],\n  standalone: true,\n})\nexport class RequiredIfNotValidatorDirective implements Validator {\n  @Input(\"requiredIfNot\") controls!: {\n    required: string;\n    check: string;\n  };\n  validate(control: AbstractControl): ValidationErrors | null {\n    return requiredIfNotValidation(control, { ...this.controls });\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that assigns a required error to both controls who's names are specified if nether one\n * has a value.\n *\n * Has an input in which you specify the control which needs to receive the required error,\n * and the control which needs to be checked.\n *\n * @usageNotes\n * <form #exampleForm=\"ngForm\"\n *   [requiredEther]=\"{\n *      required: 'field_name',\n *      check: 'field_name'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[requiredEther]\",\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: RequiredIfNotValidatorDirective,\n      multi: true,\n    },\n  ],\n  standalone: true,\n})\nexport class RequiredEtherValidatorDirective implements Validator {\n  @Input(\"requiredEther\") controls!: {\n    required: string;\n    check: string;\n  };\n  validate(control: AbstractControl): ValidationErrors | null {\n    return requiredEtherValidation(control, { ...this.controls });\n  }\n}\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { Directive, Input } from '@angular/core'\nimport {\n    AbstractControl,\n    NG_VALIDATORS,\n    ValidationErrors,\n    Validator,\n} from '@angular/forms'\nimport {\n    CompareValidationConfig,\n    ConditionalValidationConfig,\n    CountValidationConfig,\n    DateValidationConfig,\n    LengthValidationConfig,\n    LinkValidationConfig,\n    RangeValidationConfig,\n    RegExpValidationConfig,\n} from '../../interfaces/validation-config.interface'\nimport {\n    compareToValidation,\n    earlierThenValidation,\n    laterThenValidation,\n    lengthValidation,\n    linkToValidation,\n    linkedToValidation,\n    rangeValidation,\n    regexpValidation,\n    requiredWhenValidation,\n    wordCountRangeValidation,\n    wordCountValidation,\n} from '../../validations/validations'\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a RegEx check on value in the given\n * FromControl / AbstractControl\n *\n * Has an input in which you specify the regular expression\n * and optionally you can give it a custom name and a custom\n * error content / message.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"regexp\"\n *   [regExp]=\"{\n *      regExp: /(s|regexp)/,\n *      errorName: 'regexpCheck',\n *      error: 'Failed regexp check.'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[regExp]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: RegExpValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class RegExpValidatorDirective implements Validator {\n    @Input('regExp') value!: RegExpValidationConfig\n\n    validate(control: AbstractControl): ValidationErrors | null {\n        return regexpValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a date comparison between a specified date\n * and a date in the given input and returns an error if the date in\n * the given input is later then the specified one.\n *\n * Has an input in which you specify the date to compare to\n * and optionally you can give it a custom name and a custom\n * error content / message.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"earlierThen\"\n *   [earlierThen]=\"{\n *      date: date,                              -- a variable of type Date\n *      errorName: 'earlierThen',\n *      error: 'The date is not earlier then the specified one.'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[earlierThen]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: EarlierThenValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class EarlierThenValidatorDirective implements Validator {\n    @Input('earlierThen') value!: DateValidationConfig\n\n    validate(control: AbstractControl): ValidationErrors | null {\n        return earlierThenValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a date comparison between a specified date\n * and a date in the given input and returns an error if the date in\n * the given input is earlier then the specified one.\n *\n * Has an input in which you specify the date to compare to\n * and optionally you can give it a custom name and a custom\n * error content / message.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"laterThen\"\n *   [laterThen]=\"{\n *      date: date,                              -- a variable of type Date\n *      errorName: 'laterThen',\n *      error: 'The date is not later then the specified one.'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[laterThen]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: LaterThenValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class LaterThenValidatorDirective implements Validator {\n    @Input('laterThen') value!: DateValidationConfig\n\n    validate(control: AbstractControl): ValidationErrors | null {\n        return laterThenValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a date comparison between a specified date\n * and a date in the given input and returns an error if chosen comparison\n * fails.\n *\n * Has an input in which you specify the date to compare to,\n * comparison to preform and optionally you can give it a custom name\n * and a custom error content / message.\n *\n * Available comparisons are: '<' , '>' , '==' , '===' , '<=' , '>='.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"compareTo\"\n *   [compareTo]=\"{\n *      date: date,                              -- a variable of type Date\n *      comparison: '==='\n *      errorName: 'compareTo',\n *      error: 'The dates are not the same.'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[compareTo]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: CompareToValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class CompareToValidatorDirective implements Validator {\n    @Input('compareTo') value!: CompareValidationConfig\n    validate(control: AbstractControl): ValidationErrors | null {\n        return compareToValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a conditional check and if the condition\n * passes it will return an error.\n *\n * Has an input in which you specify the condition that is to be checked\n * and optionally you can give it a custom name and a custom error\n * content / message.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"requiredWhen\"\n *   [requiredWhen]=\"{\n *      conditional: isTrue,                     - this can be ether a boolean\n *      errorName: 'requiredWhen',                     or a function that returns a boolean\n *      error: 'The condition is true.'\n *   }\"\n * />\n *\n * NOTE: It is not recommended to pass a function to be executed in the template,\n * as this function will be executed every change detection cycle.\n */\n@Directive({\n    selector: '[requiredWhen]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: RequiredWhenValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class RequiredWhenValidatorDirective implements Validator {\n    @Input('requiredWhen') value!: ConditionalValidationConfig\n    validate(control: AbstractControl): ValidationErrors | null {\n        return requiredWhenValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a check if the specified FromControl / AbstractControl\n * has a value and a given input does not.\n *\n * Has an input in which you the name of the FromControl / AbstractControl to link\n * to and optionally you can give it a custom name and a custom error\n * content / message.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"linkTo\"\n *   [linkTo]=\"{\n *      link: 'linkedTo,                      - a name of a form control we want\n *      errorName: 'linkTo',                     to link the input to\n *      error: 'The linked input has a value but this one does not'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[linkTo]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: LinkToValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class LinkToValidatorDirective implements Validator {\n    @Input('linkTo') value!: LinkValidationConfig\n    validate(control: AbstractControl): ValidationErrors | null {\n        return linkToValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a check if the specified FromControl / AbstractControl\n * does not have a value and a given input does.\n *\n * Has an input in which you the name of the FromControl / AbstractControl to link\n * to and optionally you can give it a custom name and a custom error\n * content / message.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"linkedTo\"\n *   [linkedTo]=\"{\n *      link: 'linkTo,                      - a name of a form control we want\n *      errorName: 'linkedTo',                     to link the input to\n *      error: 'The linked input does not have a value but this one does.'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[linkedTo]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: LinkedToValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class LinkedToValidatorDirective implements Validator {\n    @Input('linkedTo') value!: LinkValidationConfig\n    validate(control: AbstractControl): ValidationErrors | null {\n        return linkedToValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a check on a specified FromControl / AbstractControl's\n * value and returns an error if the given comparison fails.\n *\n * Has an input in which you specify the length to compere to and the comparison\n * to preform. Optionally you can give it a custom name and a custom error\n * content / message.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"length\"\n *   [length]=\"{\n *      length: 8,\n *      comparison: \">\",\n *      errorName: 'length',\n *      error: 'Value is not long enough.'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[length]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: LengthValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class LengthValidatorDirective implements Validator {\n    @Input('length') value!: LengthValidationConfig\n    validate(control: AbstractControl): ValidationErrors | null {\n        return lengthValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a check on a specified FromControl / AbstractControl's\n * value and returns an error if the value is not in the specified range.\n *\n * Has an input in which you specify the range start value, range end value\n * and optionally you can give it a custom name and a custom error content / message.\n *\n * NOTE: The range is inclusive.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"range\"\n *   [range]=\"{\n *      start: 8,\n *      end: 14,\n *      errorName: 'range',\n *      error: 'Value is not in the specified range.'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[range]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: RangeValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class RangeValidatorDirective implements Validator {\n    @Input('range') value!: RangeValidationConfig\n    validate(control: AbstractControl): ValidationErrors | null {\n        return rangeValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a check on a specified FromControl / AbstractControl's\n * value and returns an error if it doesn't have a required word count.\n *\n * Has an input in which you specify the word count to compere to and the comparison\n * to preform. Optionally you can give it a custom name and a custom error\n * content / message.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"wordCount\"\n *   [wordCount]=\"{\n *      count: 8,\n *      comparison: \">\",\n *      errorName: 'wordCount',\n *      error: 'The minimum required word count is 8.'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[wordCount]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: WordCountValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class WordCountValidatorDirective implements Validator {\n    @Input('wordCount') value!: CountValidationConfig\n    validate(control: AbstractControl): ValidationErrors | null {\n        return wordCountValidation(control, { ...this.value })\n    }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that preforms a check on a specified FromControl / AbstractControl's\n * value and returns an error if the value is not in the specified word count range.\n *\n * Has an input in which you specify the range start value, range end value\n * and optionally you can give it a custom name and a custom error content / message.\n *\n * NOTE: The range is inclusive.\n *\n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"wordCountRange\"\n *   [wordCountRange]=\"{\n *      start: 8,\n *      end: 14,\n *      errorName: 'wordCountRange',\n *      error: 'Value is not in the specified word count range.'\n *   }\"\n * />\n */\n@Directive({\n    selector: '[wordCountRange]',\n    standalone: true,\n    providers: [\n        {\n            provide: NG_VALIDATORS,\n            useExisting: WordCountRangeValidatorDirective,\n            multi: true,\n        },\n    ],\n})\nexport class WordCountRangeValidatorDirective implements Validator {\n    @Input('wordCountRange') value!: RangeValidationConfig\n    validate(control: AbstractControl): ValidationErrors | null {\n        return wordCountRangeValidation(control, { ...this.value })\n    }\n}\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport {\n  BaseValidationConfig,\n  RegExpValidationConfig,\n} from \"../interfaces/validation-config.interface\";\nimport { RegExpLogicalOperations } from \"../types\";\n\n/**\n * @internal\n * @description\n * An decorator which handles the input value in directives which extend the\n * {@link RegExpValidatorDirective} and have an expected input in the form of\n * {@link RegExpValidationConfig}.\n *\n * It will populate the error and the errorName values passed to it if it doesn't find\n * them in the input value.\n * @param regexp                      - Regular expression to check\n * @param errorName                   - parameter representing error name\n * @param error                       - parameter representing error value\n */\nexport function RegExpValidatorInput(\n  regexp: RegExp,\n  errorName: string,\n  error: string,\n  logic?: RegExpLogicalOperations,\n): (target: any, propertyKey: string) => void {\n  return function (target: any, propertyKey: string): void {\n    type ObjectKey = keyof typeof target;\n    let original: BaseValidationConfig = target[propertyKey as ObjectKey];\n\n    let newData: BaseValidationConfig = {\n      ...original,\n    };\n\n    const getter = function (): RegExpValidationConfig {\n      (newData as RegExpValidationConfig) = {\n        regExp: regexp,\n        logic: logic ?? '!!',\n        errorName: newData.errorName ?? errorName,\n        error: newData.error ?? error,\n      };\n      return newData as RegExpValidationConfig;\n    };\n\n    const setter = function (val: RegExpValidationConfig) {\n      newData = val;\n    };\n\n    Object.defineProperty(target, propertyKey, {\n      get: getter,\n      set: setter,\n    });\n  };\n}\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n */\n\nimport { Directive, Input } from \"@angular/core\";\nimport {\n  AbstractControl,\n  NG_VALIDATORS,\n  ValidationErrors,\n} from \"@angular/forms\";\nimport { RegExpValidatorDirective } from \"./template-driven-form-validators\";\nimport { RegExpValidatorInput } from \"../../decorators/validator-input\";\nimport {\n  IPAddressV4,\n  IPAddressV4AndV6,\n  IPAddressV6,\n  address,\n  dateDD_MM_YYYY,\n  dateYYYY_MM_DD,\n  email,\n  lettersOnly,\n  noSpecial,\n  numbersOnly,\n  passport,\n  passwordStrength,\n  phoneNumber,\n  space,\n  spaceRestriction,\n  ssn,\n  timeHH_MM_12,\n  timeHH_MM_24,\n  timeHH_MM_SS_24,\n  url,\n  zipCode,\n} from \"../../constant/regex\";\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl is \n * in a proper address format (Street number Street Name, City, State ZIP code)\n * Example: 3344 W Alameda Avenue, Lakewood, CO 80222\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"address\"\n *   [address]=\"{\n *      errorName: 'address',\n *      error: 'Wrong address format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[address]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: AddressValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class AddressValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    address,\n    \"address\",\n    \"Please input a value in a format of: Street number Street Name, City, State ZIP code.\"\n  )\n  @Input(\"address\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that hecks if a value in the given FromControl / AbstractControl \n * consists of only alphabetic characters.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"alphabet\"\n *   [alphabetOnly]=\"{\n *      errorName: 'alphabet',\n *      error: 'Only letters please.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[alphabetOnly]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: AlphabetOnlyValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class AlphabetOnlyValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    lettersOnly,\n    \"alphabetOnly\",\n    \"Only alphabetic characters are allowed.\"\n  )\n  @Input(\"alphabetOnly\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in one of the following formats: dd-MM-YYYY, dd.MM.YYYY or dd/MM/YYYY.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"dateDD_MM_YYYY\"\n *   [dateDD_MM_YYYY]=\"{\n *      errorName: 'dateDD_MM_YYYY',\n *      error: 'Wrong date format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[dateDD_MM_YYYY]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: DateDD_MM_YYYYValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class DateDD_MM_YYYYValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    dateDD_MM_YYYY,\n    \"dateDD_MM_YYYY\",\n    \"Please input a value one of the following formats: dd-MM-YYYY or dd.MM.YYYY or dd/MM/YYYY.\"\n  )\n  @Input(\"dateDD_MM_YYYY\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is a following format: YYYY-MM-dd.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"dateYYYY_MM_DD\"\n *   [dateYYYY_MM_DD]=\"{\n *      errorName: 'dateYYYY_MM_DD',\n *      error: 'Wrong date format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[dateYYYY_MM_DD]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: DateYYYY_MM_DDValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class DateYYYY_MM_DDValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    dateYYYY_MM_DD,\n    \"dateYYYY_MM_DD\",\n    \"Please input a value in a format: YYYY-MM-dd.\"\n  )\n  @Input(\"dateYYYY_MM_DD\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is a following format: local-part@domain.com.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"email\"\n *   [email]=\"{\n *      errorName: 'email',\n *      error: 'Wrong email format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[email]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: EmailValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class EmailValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    email,\n    \"email\",\n    \"Please input a value in a format: local-part@domain.com.\"\n  )\n  @Input(\"email\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in one of the following formats: x.x.x.x or y:y:y:y:y:y:y:y.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"ipAddress\"\n *   [ipAddress]=\"{\n *      errorName: 'ipAddress',\n *      error: 'Wrong ip address format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[ipAddress]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: IPAddressValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class IPAddressValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    IPAddressV4AndV6,\n    \"ipAddress\",\n    \"Please input a value one of the following formats: x.x.x.x or y:y:y:y:y:y:y:y.\"\n  )\n  @Input(\"ipAddress\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in a following format: x.x.x.x.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"iPv4\"\n *   [iPv4]=\"{\n *      errorName: 'iPv4',\n *      error: 'Wrong ip address format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[iPv4]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: IPv4ValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class IPv4ValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    IPAddressV4,\n    \"iPv4\",\n    \"Please input a value in a format: x.x.x.x.\"\n  )\n  @Input(\"iPv4\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in a following format:  y:y:y:y:y:y:y:y.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"iPv6\"\n *   [iPv6]=\"{\n *      errorName: 'iPv6',\n *      error: 'Wrong ip address format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[iPv6]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: IPv6ValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class IPv6ValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    IPAddressV6,\n    \"iPv6\",\n    \"Please input a value in a format: y:y:y:y:y:y:y:y.\"\n  )\n  @Input(\"iPv6\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * consists of only numeric characters.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"numbers\"\n *   [numericsOnly]=\"{\n *      errorName: 'numbers',\n *      error: 'Numbers only please.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[numericsOnly]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: NumericsOnlyValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class NumericsOnlyValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    numbersOnly,\n    \"numbersOnly\",\n    \"Only numeric characters are allowed.\"\n  )\n  @Input(\"numericsOnly\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * has any special characters.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"noSpecials\"\n *   [noSpecials]=\"{\n *      errorName: 'noSpecials',\n *      error: 'Remove any special characters.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[noSpecials]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: NoSpecialsValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class NoSpecialsValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    noSpecial,\n    \"noSpecials\",\n    \"No special characters are allowed.\"\n  )\n  @Input(\"noSpecials\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in a proper passport format.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"passport\"\n *   [passport]=\"{\n *      errorName: 'passport',\n *      error: 'Wrong passport format'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[passport]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: PassportValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class PassportValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(passport, \"passport\", \"Incorrect passport format.\")\n  @Input(\"passport\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in a strong password format (Has at least 1 lowercase letter, 1 uppercase letter, \n * 1 number, 1 special character and has length of at least 8 characters).\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"password\"\n *   [password]=\"{\n *      errorName: 'password',\n *      error: 'Password is not strong enough.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[password]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: PasswordValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class PasswordValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    passwordStrength,\n    \"password\",\n    \"The value has to contain at least 1 lowercase letter, 1 uppercase letter, 1 special character and has a length of 8.\"\n  )\n  @Input(\"password\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in a following format: (000) 000 0000.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"phoneNumber\"\n *   [phoneNumber]=\"{\n *      errorName: 'phoneNumber',\n *      error: 'Wrong phone number format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[phoneNumber]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: PhoneNumberValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class PhoneNumberValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    phoneNumber,\n    \"phoneNumber\",\n    \"Please input a value in a format: (000) 000 0000.\"\n  )\n  @Input(\"phoneNumber\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * consists of a single space character.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"singleSpace\"\n *   [singleSpace]=\"{\n *      errorName: 'singleSpace',\n *      error: 'Your input has only one space in it.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[space]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: SpaceValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class SpaceValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    space,\n    \"space\",\n    \"A single space character is not allowed.\",\n    '!'\n  )\n  @Input(\"singleSpace\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * starts or ends with a space character.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"spaceRestriction\"\n *   [spaceRestriction]=\"{\n *      errorName: 'spaceRestriction',\n *      error: 'No spaces on the start or the end of the value please.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[spaceRestriction]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: SpaceRestrictionValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class SpaceRestrictionValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    spaceRestriction,\n    \"spaceRestriction\",\n    \"Value can not start or end with a space character.\"\n  )\n  @Input(\"spaceRestrictionValidation\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in one of the following formats: AAA-GGG-SSSS or AAAGGGSSSS.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"ssn\"\n *   [ssn]=\"{\n *      errorName: 'ssn',\n *      error: 'Wrong ssn format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[ssn]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: SSNValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class SSNValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    ssn,\n    \"ssn\",\n    \"Please input a value one of the following formats: AAA-GGG-SSSS or AAAGGGSSSS.\"\n  )\n  @Input(\"ssn\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in a Time Format HH:MM 12-hour with optional leading 0.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"timeHH_MM_12\"\n *   [timeHH_MM_12]=\"{\n *      errorName: 'timeHH_MM_12',\n *      error: 'Wrong time format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[timeHH_MM_12]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: TimeHH_MM_12ValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class TimeHH_MM_12ValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    timeHH_MM_12,\n    \"timeHH_MM_12\",\n    \"Please input a value in a HH:MM 12-hour format.\"\n  )\n  @Input(\"timeHH_MM_12\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in a Time Format HH:MM 24-hour with optional leading 0.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"timeHH_MM_24\"\n *   [timeHH_MM_24]=\"{\n *      errorName: 'timeHH_MM_24',\n *      error: 'Wrong time format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[timeHH_MM_24]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: TimeHH_MM_24ValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class TimeHH_MM_24ValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    timeHH_MM_24,\n    \"timeHH_MM_24\",\n    \"Please input a value in a HH:MM 24-hour format.\"\n  )\n  @Input(\"timeHH_MM_24\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in a Time Format HH:MM:SS 24-hour.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"timeHH_MM_SS_24\"\n *   [timeHH_MM_SS_24]=\"{\n *      errorName: 'timeHH_MM_SS_24',\n *      error: 'Wrong time format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[timeHH_MM_SS_24]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: TimeHH_MM_SS_24ValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class TimeHH_MM_SS_24ValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(\n    timeHH_MM_SS_24,\n    \"timeHH_MM_SS_24\",\n    \"Please input a value in a HH:MM:SS 24-hour format.\"\n  )\n  @Input(\"timeHH_MM_SS_24\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in a correct url format.\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"url\"\n *   [url]=\"{\n *      errorName: 'url',\n *      error: 'Wrong url format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[url]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: UrlValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class UrlValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(url, \"url\", \"Improper URL format.\")\n  @Input(\"url\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n\n/**\n * @publicApi\n * @description\n * A Directive that checks if a value in the given FromControl / AbstractControl \n * is in one of the following formats: 00000 or 00000-0000..\n * \n * Has an optional input in which you specify custom name and a custom \n * error content / message. \n * \n * @usageNotes\n *  <input\n *    type=\"text\"\n *    formControlName=\"zipCode\"\n *   [zipCode]=\"{\n *      errorName: 'zipCode',\n *      error: 'Wrong zip code format.'\n *   }\"\n * />\n */\n@Directive({\n  selector: \"[zipCode]\",\n  standalone: true,\n  providers: [\n    {\n      provide: NG_VALIDATORS,\n      useExisting: ZipCodeValidatorDirective,\n      multi: true,\n    },\n  ],\n})\nexport class ZipCodeValidatorDirective extends RegExpValidatorDirective {\n  @RegExpValidatorInput(zipCode, \"zipCode\", \"Improper zip code format.\")\n  @Input(\"zipCode\")\n  override value!: any;\n  override validate(control: AbstractControl): ValidationErrors | null {\n    return super.validate(control);\n  }\n}\n","/**\n * @license\n * Copyright Slavko Mihajlovic All Rights Reserved.\n *\n * Use of this source code is governed by an ISC-style license that can be\n * found at https://www.isc.org/licenses/\n *\n * Public API Surface of ngx-validator-pack\n */\n\nexport * from \"./lib/directives/show-validation.directive\";\nexport * from \"./lib/interfaces/validation-config.interface\";\nexport * from \"./lib/validators/reactive-forms/cross-field-validators\";\nexport * from \"./lib/validators/reactive-forms/prebuilt-validators\";\nexport * from \"./lib/validators/reactive-forms/reactive-forms-validators\";\nexport * from \"./lib/validators/template-driven-forms/cross-field-td-validators\";\nexport * from \"./lib/validators/template-driven-forms/prebuilt-tdf-validators\";\nexport * from \"./lib/validators/template-driven-forms/template-driven-form-validators\";\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}