{"version":3,"file":"dynamize-ngx-validator-pack.mjs","sources":["../../../projects/ngx-validator-pack/src/lib/constant/default-show-validation-style.ts","../../../projects/ngx-validator-pack/src/lib/directives/show-validation.directive.ts","../../../projects/ngx-validator-pack/src/lib/helpers/errors.ts","../../../projects/ngx-validator-pack/src/lib/reactive-forms/cross-field-validators.ts","../../../projects/ngx-validator-pack/src/lib/constant/regex.ts","../../../projects/ngx-validator-pack/src/lib/helpers/date.ts","../../../projects/ngx-validator-pack/src/lib/reactive-forms/reactive-forms-validators.ts","../../../projects/ngx-validator-pack/src/lib/reactive-forms/prebuilt-validators.ts","../../../projects/ngx-validator-pack/src/public-api.ts","../../../projects/ngx-validator-pack/src/dynamize-ngx-validator-pack.ts"],"sourcesContent":["/**\r\n * @license\r\n * Copyright Slavko Mihajlovic All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an ISC-style license that can be\r\n * found at https://www.isc.org/licenses/\r\n */\r\n\r\nimport { ShowValidationStyle } from \"../interfaces/show-validation-styles\";\r\n\r\n/**\r\n * @description\r\n * Default styles for the showValidation Directive\r\n * {@link ShowValidationDirective}\r\n */\r\nexport const DefaultStyle: ShowValidationStyle = {\r\n  font_size: \"small\",\r\n  font_family: `system-ui, -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif`,\r\n  color: \"salmon\",\r\n  background_color: \"\",\r\n  border: \"none\",\r\n  border_radius: \"5px\",\r\n};\r\n","/**\r\n * @license\r\n * Copyright Slavko Mihajlovic All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an ISC-style license that can be\r\n * found at https://www.isc.org/licenses/\r\n */\r\n\r\nimport {\r\n  Directive,\r\n  ElementRef,\r\n  Input,\r\n  OnDestroy,\r\n  OnInit,\r\n  Renderer2,\r\n} from \"@angular/core\";\r\nimport { FormControl, NgControl, ValidationErrors } from \"@angular/forms\";\r\nimport { Subscription } from \"rxjs\";\r\nimport { ShowValidationStyle } from '../interfaces/show-validation-styles';\r\nimport { DefaultStyle } from \"../constant/default-show-validation-style\";\r\n\r\n/**\r\n * @description\r\n * A directive which will show a validation error message to the\r\n * user.\r\n * @implementation\r\n * <input\r\n *  type=\"text\"\r\n *  formControlName=\"demoControlName\"\r\n *  showValidation\r\n *  [errorStyle]=\"{                  - Optional style input\r\n *    font_size: 'medium',              used for customizing the look\r\n *    color: '#ad03fc',\r\n *  }\"\r\n * />\r\n */\r\n@Directive({\r\n  selector: \"[showValidation]\",\r\n  standalone: true,\r\n})\r\nexport class ShowValidationDirective implements OnInit, OnDestroy {\r\n  controlSub: Subscription = new Subscription();\r\n  parent!: HTMLElement;\r\n  self!: HTMLElement;\r\n  container!: HTMLElement;\r\n  span!: HTMLElement | null;\r\n\r\n  @Input() errorStyle: ShowValidationStyle = DefaultStyle;\r\n\r\n  constructor(\r\n    private readonly elementRef: ElementRef,\r\n    private readonly renderer: Renderer2,\r\n    private readonly control: NgControl\r\n  ) {}\r\n\r\n  ngOnInit(): void {\r\n    const formControl = this.control.control as FormControl;\r\n    this.parent = this.elementRef.nativeElement.parentElement;\r\n    this.self = this.elementRef.nativeElement;\r\n    this.container = this.renderer.createElement(\"div\");\r\n    this.renderer.appendChild(this.container, this.self);\r\n    this.renderer.appendChild(this.parent, this.container);\r\n    this.setStyles();\r\n\r\n    this.controlSub.add(\r\n      formControl.statusChanges.subscribe((status) => {\r\n        if (status === \"INVALID\") {\r\n          if (!this.span) {\r\n            this.showError(formControl.errors);\r\n          }\r\n        } else {\r\n          this.hideError();\r\n        }\r\n      })\r\n    );\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    this.controlSub.unsubscribe();\r\n  }\r\n\r\n  setStyles(): void {\r\n    this.renderer.setStyle(this.container, \"display\", \"flex\");\r\n    this.renderer.setStyle(this.container, \"flex-direction\", \"column\");\r\n    this.renderer.setStyle(this.container, \"gap\", \"10px\");\r\n    Object.entries(this.errorStyle).forEach((style) => {\r\n      this.renderer.setStyle(this.container, style[0].replace('_', '-'), style[1]);\r\n    })\r\n  }\r\n\r\n  showError(errors: ValidationErrors | null): void {\r\n    this.span = this.renderer.createElement(\"span\");\r\n    (this.span as HTMLElement).innerHTML = this.getValidationMessage(errors);\r\n    this.renderer.appendChild(this.container, this.span);\r\n    this.renderer.setStyle(this.span, 'padding', '0px 0px 10px 10px');\r\n  }\r\n\r\n  hideError(): void {\r\n    if(this.container && this.span) {\r\n      this.renderer.removeChild(this.container, this.span);\r\n      this.span = null;\r\n    }\r\n  }\r\n\r\n  getValidationMessage(errors: ValidationErrors | null): string {\r\n    return errors ? Object.values(errors)[0] : \"Invalid Input.\";\r\n  }\r\n}\r\n","/**\r\n * @license\r\n * Copyright Slavko Mihajlovic All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an ISC-style license that can be\r\n * found at https://www.isc.org/licenses/\r\n */\r\n\r\nimport { AbstractControl } from \"@angular/forms\";\r\n\r\n/**\r\n * @description\r\n * Sets an error on a given control\r\n *\r\n * @param {AbstractControl}           - FromControl / AbstractControl to set the error to \r\n * @param {{ [key: string]: unknown }}- error content\r\n */\r\nexport const setErrors = (\r\n    control: AbstractControl,\r\n    error: { [key: string]: unknown }\r\n  ): void => {\r\n    control.setErrors({ ...control.errors, ...error });\r\n}\r\n  \r\n/**\r\n * @description\r\n * Removes errors on a given control\r\n *\r\n * @param {AbstractControl}           - FromControl / AbstractControl from which\r\n *                                      to remove error\r\n * @param {string[]}                  - list of error names\r\n */\r\nexport const removeErrors = (control: AbstractControl, keys: string[]): void => {\r\n    const remainingErrors = keys.reduce(\r\n      (errors, key): { [x: string]: unknown } => {\r\n        delete errors[key];\r\n        return errors;\r\n      },\r\n      {\r\n        ...control.errors,\r\n      }\r\n    );\r\n    control.setErrors(\r\n      Object.keys(remainingErrors).length > 0 ? remainingErrors : null\r\n    );\r\n  }","/**\r\n * @license\r\n * Copyright Slavko Mihajlovic All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an ISC-style license that can be\r\n * found at https://www.isc.org/licenses/\r\n */\r\n\r\nimport { AbstractControl, ValidationErrors } from \"@angular/forms\";\r\nimport { removeErrors, setErrors } from \"../helpers/errors\";\r\n\r\n/**\r\n * @description\r\n * Assigns a required error to the controls with a name was specified in the\r\n * first parameter if the control with a name specified in the second parameter\r\n * has no value.\r\n *\r\n * @param {string}                    - control name to receive the required error\r\n * @param {string}                    - control name who's value needs to be checked\r\n * @param {string}                    - error message - optional parameter\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const requiredIf = (\r\n  requiredControlName: string,\r\n  controlToCheckName: string,\r\n  error?: string\r\n) => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const required = control?.get(requiredControlName) as AbstractControl;\r\n    const toCheck = control?.get(controlToCheckName) as AbstractControl;\r\n    if (required?.value || !toCheck?.value) {\r\n      removeErrors(required, [\"required\"]);\r\n      return null;\r\n    } else {\r\n      const errorVal =\r\n        error ??\r\n        `Required is ${requiredControlName} when having ${controlToCheckName}.`;\r\n      setErrors(required, { required: errorVal });\r\n      return { [errorVal]: true };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * @description\r\n * Assigns a required error to the controls with a name was specified in the\r\n * first parameter if the control with a name specified in the second parameter\r\n * has a value.\r\n *\r\n * @param {string}                    - control name to receive the required error\r\n * @param {string}                    - control name who's value needs to be checked\r\n * @param {string}                    - error message - optional parameter\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const requiredIfNot = (\r\n  requiredControlName: string,\r\n  controlToCheckName: string,\r\n  error?: string\r\n) => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const required = control?.get(requiredControlName) as AbstractControl;\r\n    const toCheck = control?.get(controlToCheckName) as AbstractControl;\r\n    if (required?.value || toCheck?.value) {\r\n      removeErrors(required, [\"required\"]);\r\n      return null;\r\n    } else {\r\n      const errorVal =\r\n        error ??\r\n        `Required is ${requiredControlName} when not having ${controlToCheckName}.`;\r\n      setErrors(required, { required: errorVal });\r\n      return { [errorVal]: true };\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * @description\r\n * Assigns a required error to both controls who's names are specified if nether one\r\n * has a value.\r\n *\r\n * @param {string}                    - name of the first control\r\n * @param {string}                    - name of the second control\r\n * @param {string}                    - error message - optional parameter\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const requiredEther = (\r\n  requiredControlName: string,\r\n  controlToCheckName: string,\r\n  error?: string\r\n) => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const required = control?.get(requiredControlName) as AbstractControl;\r\n    const toCheck = control?.get(controlToCheckName) as AbstractControl;\r\n    if (required?.value || toCheck?.value) {\r\n      removeErrors(required, [\"required\"]);\r\n      removeErrors(toCheck, [\"required\"]);\r\n      return null;\r\n    } else {\r\n      const errorVal =\r\n        error ??\r\n        `Required either ${requiredControlName} or ${controlToCheckName}.`;\r\n      setErrors(required, { required: errorVal });\r\n      setErrors(toCheck, { required: errorVal });\r\n      return { [errorVal]: true };\r\n    }\r\n  };\r\n};\r\n","/**\r\n * @license\r\n * Copyright Slavko Mihajlovic All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an ISC-style license that can be\r\n * found at https://www.isc.org/licenses/\r\n */\r\n\r\n// Checks id an input in a format of Street number Street Name, City, State ZIP code\r\nexport const address = /^(\\d{1,}) [a-zA-Z0-9\\s]+(\\,)? [a-zA-Z]+(\\,)? [A-Z]{2} [0-9]{5,6}$/;\r\n// Checks for date format YYYY-MM-dd\r\nexport const dateYYYY_MM_DD =\r\n  /([12]\\d{3}-(0[1-9]|1[0-2])-(0[1-9]|[12]\\d|3[01]))/;\r\n// Checks for date format  dd-MM-YYYY or dd.MM.YYYY or dd/MM/YYYY\r\n// with check for leap year\r\nexport const dateDD_MM_YYYY =\r\n  /^(?:(?:31(\\/|-|\\.)(?:0?[13578]|1[02]))\\1|(?:(?:29|30)(\\/|-|\\.)(?:0?[1,3-9]|1[0-2])\\2))(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$|^(?:29(\\/|-|\\.)0?2\\3(?:(?:(?:1[6-9]|[2-9]\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\d|2[0-8])(\\/|-|\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\4(?:(?:1[6-9]|[2-9]\\d)?\\d{2})$/;\r\n// Checks if input is an email\r\nexport const email =\r\n  /^(([^<>()[\\]\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@(([^<>()[\\]\\.,;:\\s@\\\"]+\\.)+[^<>()[\\]\\.,;:\\s@\\\"]{2,})$/i;\r\n// Checks if input is in a IPv4 format\r\nexport const IPAddressV4 =\r\n  /^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$/;\r\n// Checks if input is in a IPv6 format\r\nexport const IPAddressV6 =\r\n  /(([0-9a-fA-F]{1,4}:){7,7}[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,7}:|([0-9a-fA-F]{1,4}:){1,6}:[0-9a-fA-F]{1,4}|([0-9a-fA-F]{1,4}:){1,5}(:[0-9a-fA-F]{1,4}){1,2}|([0-9a-fA-F]{1,4}:){1,4}(:[0-9a-fA-F]{1,4}){1,3}|([0-9a-fA-F]{1,4}:){1,3}(:[0-9a-fA-F]{1,4}){1,4}|([0-9a-fA-F]{1,4}:){1,2}(:[0-9a-fA-F]{1,4}){1,5}|[0-9a-fA-F]{1,4}:((:[0-9a-fA-F]{1,4}){1,6})|:((:[0-9a-fA-F]{1,4}){1,7}|:)|fe80:(:[0-9a-fA-F]{0,4}){0,4}%[0-9a-zA-Z]{1,}|::(ffff(:0{1,4}){0,1}:){0,1}((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])|([0-9a-fA-F]{1,4}:){1,4}:((25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9])\\.){3,3}(25[0-5]|(2[0-4]|1{0,1}[0-9]){0,1}[0-9]))/;\r\n// Checks if input is in a IPv4 or IPv6 format\r\nexport const IPAddressV4AndV6 =\r\n  /((^\\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\\s*$)|(^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$))/;\r\n// Checks if an input consists of letters only\r\nexport const lettersOnly = /^[A-Za-z]+$/;\r\n// Checks if the input consists of letters, periods, hyphens and spaces\r\nexport const lettersPeriodsHyphensAndSpaces = /^[a-zA-Z\\s.-]+$/;\r\n// Checks if input contains any special characters\r\nexport const noSpecial = /^[A-Za-z0-9 ]+$/;\r\n// Checks if an input consists of numbers only\r\nexport const numbersOnly = /^\\d+$/;\r\n// Checks if input is in passport format\r\nexport const passport = /^[A-PR-WY][1-9]\\d\\s?\\d{4}[1-9]$/;\r\n// Checks if input consist of at least 1 lowercase letter, 1 uppercase letter,\r\n// 1 number, 1 special character and has length of at least 8 characters\r\nexport const passwordStrength =\r\n  /(?=(.*[0-9]))(?=.*[\\!@#$%^&*()\\\\[\\]{}\\-_+=~`|:;\"'<>,./?])(?=.*[a-z])(?=(.*[A-Z]))(?=(.*)).{8,}/;\r\n// Checks for a (000) 000 0000 phone format\r\nexport const phoneNumber = /^(\\()?[2-9]{1}\\d{2}(\\))?(-|\\s)?\\d{3}(-|\\s)\\d{4}$/;\r\n// Checks for a single space character\r\nexport const singleSpace = /[\\s]/;\r\n// Restrict only spaces, spaces at the beginning and end of the field\r\nexport const spaceRestriction = /^\\S$|^\\S[\\s\\S]*\\S$/;\r\n// Checks if input is in an Social Security Number format\r\nexport const ssn =\r\n  /^((?!219-09-9999|078-05-1120)(?!666|000|9\\d{2})\\d{3}-(?!00)\\d{2}-(?!0{4})\\d{4})|((?!219 09 9999|078 05 1120)(?!666|000|9\\d{2})\\d{3} (?!00)\\d{2} (?!0{4})\\d{4})|((?!219099999|078051120)(?!666|000|9\\d{2})\\d{3}(?!00)\\d{2}(?!0{4})\\d{4})$/;\r\n// Checks for Time Format HH:MM 12-hour with optional leading 0\r\nexport const timeHH_MM_12 = /((1[0-2]|0?[1-9]):([0-5][0-9]) ?([AaPp][Mm]))/;\r\n// Checks for Time Format HH:MM 24-hour with optional leading 0\r\nexport const timeHH_MM_24 = /^([0-9]|0[0-9]|1[0-9]|2[0-3]):[0-5][0-9]$/;\r\n// Checks for Time Format HH:MM:SS 24-hour\r\nexport const timeHH_MM_SS_24 =\r\n  /(?:[01]\\d|2[0123]):(?:[012345]\\d):(?:[012345]\\d)/;\r\n// Checks if input is a url\r\nexport const url =\r\n  /(http|ftp|https):\\/\\/[\\w-]+(\\.[\\w-]+)+([\\w.,@?^=%&amp;:\\/~+#-]*[\\w@?^=%&amp;\\/~+#-])?/;\r\n// Checks of a zip code in formats 00000 or 00000-0000\r\nexport const zipCode = /(^\\d{5}$)|(^\\d{5}-\\d{4}$)/;\r\n","/**\r\n * @license\r\n * Copyright Slavko Mihajlovic All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an ISC-style license that can be\r\n * found at https://www.isc.org/licenses/\r\n */\r\n\r\nexport type ComparisonOperations = '<' | '>' | '==' | '===' | '<=' | '>=';\r\n\r\nexport const prepareToCompare = (\r\n    date: Date | string | undefined | null,\r\n    bufferYears?: number\r\n): number => {\r\n    if(date) {\r\n        const p_Date = new Date(date);\r\n        const year = p_Date.getFullYear() + (bufferYears ?? 0);\r\n        const month = p_Date.getMonth() + 1;\r\n        const day = p_Date.getDate();\r\n        return Number.parseInt(\r\n            `${year}${month.toString().replace.length > 1 ? month : '0' + month}${day.toString().length > 1 ? day : '0' + day}`\r\n        );\r\n    }\r\n    else {\r\n        return 0;\r\n    }\r\n} \r\n\r\nexport const compareDates = (date1: Date, date2: Date, operation: ComparisonOperations = '==='): boolean => {\r\n    return compare(date1, date2, operation);\r\n}\r\n\r\nconst compare = (date1: Date, date2: Date, comparison: ComparisonOperations): boolean => {\r\n    const operations = {\r\n        '<': (a: Date, b: Date) => prepareToCompare(a) < prepareToCompare(b),\r\n        '>': (a: Date, b: Date) => prepareToCompare(a) > prepareToCompare(b),\r\n        '==': (a: Date, b: Date) => prepareToCompare(a) == prepareToCompare(b),\r\n        '===': (a: Date, b: Date) => prepareToCompare(a) === prepareToCompare(b),\r\n        '<=': (a: Date, b: Date) => prepareToCompare(a) <= prepareToCompare(b),\r\n        '>=': (a: Date, b: Date) => prepareToCompare(a) >= prepareToCompare(b),\r\n    }\r\n    return operations[comparison](date1, date2);\r\n}","/**\r\n * @license\r\n * Copyright Slavko Mihajlovic All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an ISC-style license that can be\r\n * found at https://www.isc.org/licenses/\r\n */\r\n\r\nimport { AbstractControl, ValidationErrors, ValidatorFn } from \"@angular/forms\";\r\nimport {\r\n  ComparisonOperations,\r\n  compareDates,\r\n  prepareToCompare,\r\n} from \"../helpers/date\";\r\n\r\n/**\r\n * @description\r\n * Preforms a RegEx check on value in the given FromControl / AbstractControl\r\n *\r\n * @param {RegExp}                    - Regular expression to check\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const regexpValidator =\r\n  (regexp: RegExp, errorName?: string, error?: string): ValidatorFn =>\r\n  (control: AbstractControl): ValidationErrors | null => {\r\n    error = error ?? \"This control did not match a given regular expression.\";\r\n    const errors: ValidationErrors = {\r\n      [errorName ?? \"regexpValidator\"]: error,\r\n    };\r\n\r\n    return !control.value || regexp.test(control.value) ? null : errors;\r\n  };\r\n\r\n/**\r\n * @description\r\n * Preforms a RegEx check on value in the given FromControl / AbstractControl\r\n *\r\n * @param {RegExp}                    - Regular expression to check\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const regexpNotValidator =\r\n  (regexp: RegExp, errorName?: string, error?: string): ValidatorFn =>\r\n  (control: AbstractControl): ValidationErrors | null => {\r\n    error = error ?? \"This control matched a given regular expression.\";\r\n    const errors: ValidationErrors = {\r\n      [errorName ?? \"regexpNotValidator\"]: error,\r\n    };\r\n\r\n    return !control.value || !regexp.test(control.value) ? null : errors;\r\n  };\r\n\r\n/**\r\n * @description\r\n * Checks if the date in the given FromControl / AbstractControl is earlier then\r\n * the value in the specified FromControl / AbstractControl\r\n *\r\n * @param {AbstractControl}           - AbstractControl to preform the check against\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const earlierThenValidator =\r\n  (date: Date, errorName?: string, error?: string): ValidatorFn =>\r\n  (control: AbstractControl): ValidationErrors | null => {\r\n    error = error ?? `This control must have a value earlier then ${date}.`;\r\n    const errors: ValidationErrors = { [errorName ?? \"earlierThen\"]: error };\r\n\r\n    return prepareToCompare(control?.value) < prepareToCompare(date)\r\n      ? null\r\n      : errors;\r\n  };\r\n\r\n/**\r\n * @description\r\n * Checks if the date in the given FromControl / AbstractControl is greater then\r\n * the value in the specified FromControl / AbstractControl\r\n *\r\n * @param {AbstractControl}           - AbstractControl to preform the check against\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const laterThenValidator =\r\n  (date: Date, errorName?: string, error?: string): ValidatorFn =>\r\n  (control: AbstractControl): ValidationErrors | null => {\r\n    error = error ?? `This control must have a value later then ${date}.`;\r\n    const errors: ValidationErrors = { [errorName ?? \"laterThen\"]: error };\r\n\r\n    return prepareToCompare(control?.value) > prepareToCompare(date)\r\n      ? null\r\n      : errors;\r\n  };\r\n\r\n/**\r\n * @description\r\n * Compares the date values of the given FromControl / AbstractControl and\r\n * specified FromControl / AbstractControl\r\n *\r\n * @param {string}                    - name of the filed to compare against\r\n * @param {ComparisonOperations}      - comparison to preform\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const compareToValidator =\r\n  (\r\n    filedName: string,\r\n    comparison: ComparisonOperations,\r\n    errorName?: string,\r\n    error?: string\r\n  ): ValidatorFn =>\r\n  (control: AbstractControl): ValidationErrors | null => {\r\n    const date = control.parent?.get(filedName)?.value;\r\n    if (date) {\r\n      error = error ?? `Value comparison with ${date} failed.`;\r\n      const errors: ValidationErrors = {\r\n        [errorName ?? \"dateComparison\"]: error,\r\n      };\r\n      return control.value && compareDates(control.value, date, comparison)\r\n        ? null\r\n        : errors;\r\n    }\r\n    return null;\r\n  };\r\n\r\n/**\r\n * @description\r\n * Returns a validation error if a condition is met\r\n *\r\n * @param {Function | boolean}        - conditional function or a boolean value\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const requiredWhenValidator =\r\n  (\r\n    conditional: (() => boolean) | boolean,\r\n    errorName?: string,\r\n    error?: string\r\n  ): ValidatorFn =>\r\n  (control: AbstractControl): ValidationErrors | null => {\r\n    error = error ?? \"This control has a conditional set on it.\";\r\n    const errors: ValidationErrors = { [errorName ?? \"requiredWhen\"]: error };\r\n\r\n    const outcome =\r\n      typeof conditional === \"function\" ? conditional() : conditional;\r\n    return !control.value && outcome ? errors : null;\r\n  };\r\n\r\n/**\r\n * @description\r\n * Returns a validation error if a given FromControl / AbstractControl has no value\r\n * and specified FromControl / AbstractControl has it\r\n *\r\n * @param {string}                    - name of the FromControl / AbstractControl to link to\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const linkToValidator =\r\n  (linkTo: string, errorName?: string, error?: string): ValidatorFn =>\r\n  (control: AbstractControl): ValidationErrors | null => {\r\n    error = error ?? `This control has a link to ${linkTo}.`;\r\n    const errors: ValidationErrors = { [errorName ?? \"linkTo\"]: error };\r\n\r\n    const linkedTo = control.parent?.get(linkTo);\r\n    return !control?.value && !!linkedTo?.value ? errors : null;\r\n  };\r\n\r\n/**\r\n * @description\r\n * Returns a validation error if a given FromControl / AbstractControl has a value\r\n * and specified FromControl / AbstractControl does not\r\n *\r\n * @param {string}                    - name of the FromControl / AbstractControl\r\n *                                      which a given FromControl / AbstractControl is linked to\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const linkedToValidator =\r\n  (linkedTo: string, errorName?: string, error?: string): ValidatorFn =>\r\n  (control: AbstractControl): ValidationErrors | null => {\r\n    error = error ?? `This control is linked to ${linkedTo}.`;\r\n    const errors: ValidationErrors = { [errorName ?? \"linkTo\"]: error };\r\n\r\n    const link = control.parent?.get(linkedTo);\r\n    return !!control?.value && !link?.value ? errors : null;\r\n  };\r\n","/**\r\n * @license\r\n * Copyright Slavko Mihajlovic All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an ISC-style license that can be\r\n * found at https://www.isc.org/licenses/\r\n */\r\n\r\nimport { ValidationErrors } from \"@angular/forms\";\r\nimport {\r\n  IPAddressV4,\r\n  IPAddressV4AndV6,\r\n  IPAddressV6,\r\n  address,\r\n  dateDD_MM_YYYY,\r\n  dateYYYY_MM_DD,\r\n  email,\r\n  lettersOnly,\r\n  noSpecial,\r\n  numbersOnly,\r\n  passport,\r\n  passwordStrength,\r\n  phoneNumber,\r\n  singleSpace,\r\n  spaceRestriction,\r\n  ssn,\r\n  timeHH_MM_12,\r\n  timeHH_MM_24,\r\n  timeHH_MM_SS_24,\r\n  url,\r\n  zipCode,\r\n} from \"../constant/regex\";\r\nimport {\r\n  regexpNotValidator,\r\n  regexpValidator,\r\n} from \"./reactive-forms-validators\";\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a proper address format\r\n * (Street number Street Name, City, State ZIP code)\r\n * Example: 3344 W Alameda Avenue, Lakewood, CO 80222\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const addressValidator = (\r\n  errorName: string = \"address\",\r\n  error: string = \"Please input a value in a format of: Street number Street Name, City, State ZIP code.\"\r\n): ValidationErrors | null => regexpValidator(address, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl consists of only\r\n * alphabetic characters.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const alphabetOnlyValidator = (\r\n  errorName: string = \"alphabetOnly\",\r\n  error: string = \"Only alphabetic characters are allowed.\"\r\n): ValidationErrors | null => regexpValidator(lettersOnly, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in one of the\r\n * following formats: dd-MM-YYYY, dd.MM.YYYY or dd/MM/YYYY.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param { string}                   - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const dateDD_MM_YYYYValidator = (\r\n  errorName: string = \"dateDD_MM_YYYY\",\r\n  error: string = \"Please input a value one of the following formats: dd-MM-YYYY or dd.MM.YYYY or dd/MM/YYYY.\"\r\n): ValidationErrors | null => regexpValidator(dateDD_MM_YYYY, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\r\n * YYYY-MM-dd.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const dateYYYY_MM_DDValidator = (\r\n  errorName: string = \"dateYYYY_MM_DD\",\r\n  error: string = \"Please input a value in a format: YYYY-MM-dd.\"\r\n): ValidationErrors | null => regexpValidator(dateYYYY_MM_DD, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\r\n * local-part@domain.com.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const emailValidator = (\r\n  errorName: string = \"email\",\r\n  error: string = \"Please input a value in a format: local-part@domain.com.\"\r\n): ValidationErrors | null => regexpValidator(email, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in one of the\r\n * following formats: x.x.x.x or y:y:y:y:y:y:y:y.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const ipAddressValidator = (\r\n  errorName: string = \"ipAddress\",\r\n  error: string = \"Please input a value one of the following formats: x.x.x.x or y:y:y:y:y:y:y:y\"\r\n): ValidationErrors | null =>\r\n  regexpValidator(IPAddressV4AndV6, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\r\n * x.x.x.x.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const iPv4Validator = (\r\n  errorName: string = \"iPv4\",\r\n  error: string = \"Please input a value in a format: x.x.x.x.\"\r\n): ValidationErrors | null => regexpValidator(IPAddressV4, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\r\n * y:y:y:y:y:y:y:y.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const iPv6Validator = (\r\n  errorName: string = \"iPv6\",\r\n  error: string = \"Please input a value in a format: y:y:y:y:y:y:y:y.\"\r\n): ValidationErrors | null => regexpValidator(IPAddressV6, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl consists of only\r\n * numeric characters.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const numericsOnlyValidator = (\r\n  errorName: string = \"numericsOnly\",\r\n  error: string = \"Only numeric characters are allowed.\"\r\n): ValidationErrors | null => regexpValidator(numbersOnly, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl has any special characters.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const noSpecialsValidator = (\r\n  errorName: string = \"noSpecials\",\r\n  error: string = \"No special characters are allowed.\"\r\n): ValidationErrors | null => regexpValidator(noSpecial, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a proper passport format\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const passportValidator = (\r\n  errorName: string = \"passport\",\r\n  error: string = \"Incorrect passport format.\"\r\n): ValidationErrors | null => regexpValidator(passport, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a strong password format\r\n * (Has at least 1 lowercase letter, 1 uppercase letter, 1 number, 1 special character and has\r\n * length of at least 8 characters).\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const passwordValidator = (\r\n  errorName: string = \"password\",\r\n  error: string = \"The value has to contain at least 1 lowercase letter, 1 uppercase letter, 1 special character and has a length of 8.\"\r\n): ValidationErrors | null =>\r\n  regexpValidator(passwordStrength, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a following format:\r\n * (000) 000 0000.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const phoneNumberValidator = (\r\n  errorName: string = \"phoneNumber\",\r\n  error: string = \"Please input a value in a format: (000) 000 0000.\"\r\n): ValidationErrors | null => regexpValidator(phoneNumber, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl consists of a single space\r\n * character.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const singleSpaceValidator = (\r\n  errorName: string = \"singleSpace\",\r\n  error: string = \"A single space character is not allowed.\"\r\n): ValidationErrors | null => regexpNotValidator(singleSpace, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl starts or ends with a\r\n * space character.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const spaceRestrictionValidator = (\r\n  errorName: string = \"spaceRestriction\",\r\n  error: string = \"Value can not start or end with a space character.\"\r\n): ValidationErrors | null =>\r\n  regexpValidator(spaceRestriction, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in one of the\r\n * following formats: AAA-GGG-SSSS or AAAGGGSSSS.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const ssnValidator = (\r\n  errorName: string = \"ssn\",\r\n  error: string = \"Please input a value one of the following formats: AAA-GGG-SSSS or AAAGGGSSSS.\"\r\n): ValidationErrors | null => regexpValidator(ssn, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a\r\n * Time Format HH:MM 12-hour with optional leading 0.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const timeHH_MM_12Validator = (\r\n  errorName: string = \"timeHH_MM_12\",\r\n  error: string = \"Please input a value in a HH:MM 12-hour format.\"\r\n): ValidationErrors | null => regexpValidator(timeHH_MM_12, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a\r\n * Time Format HH:MM 24-hour with optional leading 0.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const timeHH_MM_24Validator = (\r\n  errorName: string = \"timeHH_MM_24\",\r\n  error: string = \"Please input a value in a HH:MM 24-hour format.\"\r\n): ValidationErrors | null => regexpValidator(timeHH_MM_24, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a\r\n * Time Format HH:MM:SS 24-hour.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const timeHH_MM_SS_24Validator = (\r\n  errorName: string = \"timeHH_MM_SS_24\",\r\n  error: string = \"Please input a value in a HH:MM:SS 24-hour format.\"\r\n): ValidationErrors | null =>\r\n  regexpValidator(timeHH_MM_SS_24, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in a\r\n * correct url format.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const urlValidator = (\r\n  errorName: string = \"url\",\r\n  error: string = \"Improper URL format.\"\r\n): ValidationErrors | null => regexpValidator(url, errorName, error);\r\n\r\n/**\r\n * @description\r\n * Checks if a value in the given FromControl / AbstractControl is in one of the\r\n * following formats: 00000 or 00000-0000.\r\n *\r\n * @param {string}                    - optional parameter representing error name\r\n * @param {string}                    - optional parameter representing error value\r\n * @returns {ValidationErrors | null} - Validation error\r\n */\r\nexport const zipCodeValidator = (\r\n  errorName: string = \"zipCode\",\r\n  error: string = \"Improper zip code format.\"\r\n): ValidationErrors | null => regexpValidator(zipCode, errorName, error);\r\n","/**\r\n * @license\r\n * Copyright Slavko Mihajlovic All Rights Reserved.\r\n *\r\n * Use of this source code is governed by an ISC-style license that can be\r\n * found at https://www.isc.org/licenses/\r\n *\r\n * Public API Surface of ngx-validator-pack\r\n */\r\n\r\nexport * from \"./lib/directives/show-validation.directive\";\r\nexport * from \"./lib/reactive-forms/cross-field-validators\";\r\nexport * from \"./lib/reactive-forms/prebuilt-validators\";\r\nexport * from \"./lib/reactive-forms/reactive-forms-validators\";\r\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}