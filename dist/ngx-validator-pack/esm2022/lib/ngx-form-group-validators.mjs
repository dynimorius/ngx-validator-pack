/**
 * @license
 * Copyright Slavko Mihajlovic All Rights Reserved.
 *
 * Use of this source code is governed by an ISC-style license that can be
 * found at https://www.isc.org/licenses/
 */
import { removeErrors, setErrors } from "./helpers/errors";
export const requiredIf = (requiredControlName, controlToCheckName) => {
    return (control) => {
        const required = control?.get(requiredControlName);
        const toCheck = control?.get(controlToCheckName);
        if (required?.value || !toCheck?.value) {
            removeErrors(required, ["required"]);
            return null;
        }
        else {
            const errorVal = `Required ${requiredControlName} when having ${controlToCheckName}.`;
            setErrors(required, { required: errorVal });
            return { [errorVal]: true };
        }
    };
};
export const requiredIfNot = (requiredControlName, controlToCheckName) => {
    return (control) => {
        const required = control?.get(requiredControlName);
        const toCheck = control?.get(controlToCheckName);
        if (required?.value || toCheck?.value) {
            removeErrors(required, ["required"]);
            return null;
        }
        else {
            const errorVal = `Required ${requiredControlName} when not having ${controlToCheckName}.`;
            setErrors(required, { required: errorVal });
            return { [errorVal]: true };
        }
    };
};
export const requiredEther = (requiredControlName, controlToCheckName) => {
    return (control) => {
        const required = control?.get(requiredControlName);
        const toCheck = control?.get(controlToCheckName);
        if (required?.value || toCheck?.value) {
            removeErrors(required, ["required"]);
            removeErrors(toCheck, ["required"]);
            return null;
        }
        else {
            const errorVal = `Required either ${requiredControlName} or ${controlToCheckName}.`;
            setErrors(required, { required: errorVal });
            setErrors(toCheck, { required: errorVal });
            return { [errorVal]: true };
        }
    };
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWZvcm0tZ3JvdXAtdmFsaWRhdG9ycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL25neC12YWxpZGF0b3ItcGFjay9zcmMvbGliL25neC1mb3JtLWdyb3VwLXZhbGlkYXRvcnMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7OztHQU1HO0FBR0gsT0FBTyxFQUFFLFlBQVksRUFBRSxTQUFTLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUUzRCxNQUFNLENBQUMsTUFBTSxVQUFVLEdBQUcsQ0FDeEIsbUJBQTJCLEVBQzNCLGtCQUEwQixFQUMxQixFQUFFO0lBQ0YsT0FBTyxDQUFDLE9BQXdCLEVBQTJCLEVBQUU7UUFFM0QsTUFBTSxRQUFRLEdBQUcsT0FBTyxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBb0IsQ0FBQztRQUN0RSxNQUFNLE9BQU8sR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFvQixDQUFDO1FBQ3BFLElBQUksUUFBUSxFQUFFLEtBQUssSUFBSSxDQUFDLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztZQUN2QyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztZQUNyQyxPQUFPLElBQUksQ0FBQztRQUNkLENBQUM7YUFBTSxDQUFDO1lBQ04sTUFBTSxRQUFRLEdBQUcsWUFBWSxtQkFBbUIsZ0JBQWdCLGtCQUFrQixHQUFHLENBQUM7WUFDdEYsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQzVDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQzlCLENBQUM7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSxhQUFhLEdBQUcsQ0FDM0IsbUJBQTJCLEVBQzNCLGtCQUEwQixFQUMxQixFQUFFO0lBQ0YsT0FBTyxDQUFDLE9BQXdCLEVBQTJCLEVBQUU7UUFDM0QsTUFBTSxRQUFRLEdBQUcsT0FBTyxFQUFFLEdBQUcsQ0FBQyxtQkFBbUIsQ0FBb0IsQ0FBQztRQUN0RSxNQUFNLE9BQU8sR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLGtCQUFrQixDQUFvQixDQUFDO1FBQ3BFLElBQUksUUFBUSxFQUFFLEtBQUssSUFBSSxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7WUFDdEMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7WUFDckMsT0FBTyxJQUFJLENBQUM7UUFDZCxDQUFDO2FBQU0sQ0FBQztZQUNOLE1BQU0sUUFBUSxHQUFHLFlBQVksbUJBQW1CLG9CQUFvQixrQkFBa0IsR0FBRyxDQUFDO1lBQzFGLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztZQUM1QyxPQUFPLEVBQUUsQ0FBQyxRQUFRLENBQUMsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUM5QixDQUFDO0lBQ0gsQ0FBQyxDQUFDO0FBQ0osQ0FBQyxDQUFDO0FBRUYsTUFBTSxDQUFDLE1BQU0sYUFBYSxHQUFHLENBQzNCLG1CQUEyQixFQUMzQixrQkFBMEIsRUFDMUIsRUFBRTtJQUNGLE9BQU8sQ0FBQyxPQUF3QixFQUEyQixFQUFFO1FBQzNELE1BQU0sUUFBUSxHQUFHLE9BQU8sRUFBRSxHQUFHLENBQUMsbUJBQW1CLENBQW9CLENBQUM7UUFDdEUsTUFBTSxPQUFPLEdBQUcsT0FBTyxFQUFFLEdBQUcsQ0FBQyxrQkFBa0IsQ0FBb0IsQ0FBQztRQUNwRSxJQUFJLFFBQVEsRUFBRSxLQUFLLElBQUksT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO1lBQ3RDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3JDLFlBQVksQ0FBQyxPQUFPLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1lBQ3BDLE9BQU8sSUFBSSxDQUFDO1FBQ2QsQ0FBQzthQUFNLENBQUM7WUFDTixNQUFNLFFBQVEsR0FBRyxtQkFBbUIsbUJBQW1CLE9BQU8sa0JBQWtCLEdBQUcsQ0FBQztZQUNwRixTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7WUFDNUMsU0FBUyxDQUFDLE9BQU8sRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1lBQzNDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO1FBQzlCLENBQUM7SUFDSCxDQUFDLENBQUM7QUFDSixDQUFDLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcclxuICogQGxpY2Vuc2VcclxuICogQ29weXJpZ2h0IFNsYXZrbyBNaWhhamxvdmljIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXHJcbiAqXHJcbiAqIFVzZSBvZiB0aGlzIHNvdXJjZSBjb2RlIGlzIGdvdmVybmVkIGJ5IGFuIElTQy1zdHlsZSBsaWNlbnNlIHRoYXQgY2FuIGJlXHJcbiAqIGZvdW5kIGF0IGh0dHBzOi8vd3d3LmlzYy5vcmcvbGljZW5zZXMvXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgQWJzdHJhY3RDb250cm9sLCBWYWxpZGF0aW9uRXJyb3JzIH0gZnJvbSBcIkBhbmd1bGFyL2Zvcm1zXCI7XHJcbmltcG9ydCB7IHJlbW92ZUVycm9ycywgc2V0RXJyb3JzIH0gZnJvbSBcIi4vaGVscGVycy9lcnJvcnNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCByZXF1aXJlZElmID0gKFxyXG4gIHJlcXVpcmVkQ29udHJvbE5hbWU6IHN0cmluZyxcclxuICBjb250cm9sVG9DaGVja05hbWU6IHN0cmluZ1xyXG4pID0+IHtcclxuICByZXR1cm4gKGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCk6IFZhbGlkYXRpb25FcnJvcnMgfCBudWxsID0+IHtcclxuXHJcbiAgICBjb25zdCByZXF1aXJlZCA9IGNvbnRyb2w/LmdldChyZXF1aXJlZENvbnRyb2xOYW1lKSBhcyBBYnN0cmFjdENvbnRyb2w7XHJcbiAgICBjb25zdCB0b0NoZWNrID0gY29udHJvbD8uZ2V0KGNvbnRyb2xUb0NoZWNrTmFtZSkgYXMgQWJzdHJhY3RDb250cm9sO1xyXG4gICAgaWYgKHJlcXVpcmVkPy52YWx1ZSB8fCAhdG9DaGVjaz8udmFsdWUpIHtcclxuICAgICAgcmVtb3ZlRXJyb3JzKHJlcXVpcmVkLCBbXCJyZXF1aXJlZFwiXSk7XHJcbiAgICAgIHJldHVybiBudWxsO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgY29uc3QgZXJyb3JWYWwgPSBgUmVxdWlyZWQgJHtyZXF1aXJlZENvbnRyb2xOYW1lfSB3aGVuIGhhdmluZyAke2NvbnRyb2xUb0NoZWNrTmFtZX0uYDtcclxuICAgICAgc2V0RXJyb3JzKHJlcXVpcmVkLCB7IHJlcXVpcmVkOiBlcnJvclZhbCB9KTtcclxuICAgICAgcmV0dXJuIHsgW2Vycm9yVmFsXTogdHJ1ZSB9O1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVxdWlyZWRJZk5vdCA9IChcclxuICByZXF1aXJlZENvbnRyb2xOYW1lOiBzdHJpbmcsXHJcbiAgY29udHJvbFRvQ2hlY2tOYW1lOiBzdHJpbmdcclxuKSA9PiB7XHJcbiAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XHJcbiAgICBjb25zdCByZXF1aXJlZCA9IGNvbnRyb2w/LmdldChyZXF1aXJlZENvbnRyb2xOYW1lKSBhcyBBYnN0cmFjdENvbnRyb2w7XHJcbiAgICBjb25zdCB0b0NoZWNrID0gY29udHJvbD8uZ2V0KGNvbnRyb2xUb0NoZWNrTmFtZSkgYXMgQWJzdHJhY3RDb250cm9sO1xyXG4gICAgaWYgKHJlcXVpcmVkPy52YWx1ZSB8fCB0b0NoZWNrPy52YWx1ZSkge1xyXG4gICAgICByZW1vdmVFcnJvcnMocmVxdWlyZWQsIFtcInJlcXVpcmVkXCJdKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBlcnJvclZhbCA9IGBSZXF1aXJlZCAke3JlcXVpcmVkQ29udHJvbE5hbWV9IHdoZW4gbm90IGhhdmluZyAke2NvbnRyb2xUb0NoZWNrTmFtZX0uYDtcclxuICAgICAgc2V0RXJyb3JzKHJlcXVpcmVkLCB7IHJlcXVpcmVkOiBlcnJvclZhbCB9KTtcclxuICAgICAgcmV0dXJuIHsgW2Vycm9yVmFsXTogdHJ1ZSB9O1xyXG4gICAgfVxyXG4gIH07XHJcbn07XHJcblxyXG5leHBvcnQgY29uc3QgcmVxdWlyZWRFdGhlciA9IChcclxuICByZXF1aXJlZENvbnRyb2xOYW1lOiBzdHJpbmcsXHJcbiAgY29udHJvbFRvQ2hlY2tOYW1lOiBzdHJpbmdcclxuKSA9PiB7XHJcbiAgcmV0dXJuIChjb250cm9sOiBBYnN0cmFjdENvbnRyb2wpOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XHJcbiAgICBjb25zdCByZXF1aXJlZCA9IGNvbnRyb2w/LmdldChyZXF1aXJlZENvbnRyb2xOYW1lKSBhcyBBYnN0cmFjdENvbnRyb2w7XHJcbiAgICBjb25zdCB0b0NoZWNrID0gY29udHJvbD8uZ2V0KGNvbnRyb2xUb0NoZWNrTmFtZSkgYXMgQWJzdHJhY3RDb250cm9sO1xyXG4gICAgaWYgKHJlcXVpcmVkPy52YWx1ZSB8fCB0b0NoZWNrPy52YWx1ZSkge1xyXG4gICAgICByZW1vdmVFcnJvcnMocmVxdWlyZWQsIFtcInJlcXVpcmVkXCJdKTtcclxuICAgICAgcmVtb3ZlRXJyb3JzKHRvQ2hlY2ssIFtcInJlcXVpcmVkXCJdKTtcclxuICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBjb25zdCBlcnJvclZhbCA9IGBSZXF1aXJlZCBlaXRoZXIgJHtyZXF1aXJlZENvbnRyb2xOYW1lfSBvciAke2NvbnRyb2xUb0NoZWNrTmFtZX0uYDtcclxuICAgICAgc2V0RXJyb3JzKHJlcXVpcmVkLCB7IHJlcXVpcmVkOiBlcnJvclZhbCB9KTtcclxuICAgICAgc2V0RXJyb3JzKHRvQ2hlY2ssIHsgcmVxdWlyZWQ6IGVycm9yVmFsIH0pO1xyXG4gICAgICByZXR1cm4geyBbZXJyb3JWYWxdOiB0cnVlIH07XHJcbiAgICB9XHJcbiAgfTtcclxufTtcclxuIl19