/**
 * @license
 * Copyright Slavko Mihajlovic All Rights Reserved.
 *
 * Use of this source code is governed by an ISC-style license that can be
 * found at https://www.isc.org/licenses/
 */
import { removeErrors, setErrors } from "../helpers/errors";
export const requiredIfValidation = (control, config) => {
    const required = control?.get(config.requiredControlName);
    const toCheck = control?.get(config.controlToCheckName);
    if (required?.value || !toCheck?.value) {
        removeErrors(required, ["required"]);
        return null;
    }
    else {
        const errorVal = config.error ??
            `Required is ${config.requiredControlName} when having ${config.controlToCheckName}.`;
        setErrors(required, { required: errorVal });
        return { [errorVal]: true };
    }
};
export const requiredIfNotValidation = (control, config) => {
    const required = control?.get(config.requiredControlName);
    const toCheck = control?.get(config.controlToCheckName);
    if (required?.value || toCheck?.value) {
        removeErrors(required, ["required"]);
        return null;
    }
    else {
        const errorVal = config.error ??
            `Required is ${config.requiredControlName} when not having ${config.controlToCheckName}.`;
        setErrors(required, { required: errorVal });
        return { [errorVal]: true };
    }
};
export const requiredEtherValidation = (control, config) => {
    const required = control?.get(config.requiredControlName);
    const toCheck = control?.get(config.controlToCheckName);
    if (required?.value || toCheck?.value) {
        removeErrors(required, ["required"]);
        removeErrors(toCheck, ["required"]);
        return null;
    }
    else {
        const errorVal = config.error ??
            `Required either ${config.requiredControlName} or ${config.controlToCheckName}.`;
        setErrors(required, { required: errorVal });
        setErrors(toCheck, { required: errorVal });
        return { [errorVal]: true };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3MtZmllbGQtdmFsaWRhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdmFsaWRhdG9yLXBhY2svc3JjL2xpYi92YWxpZGF0aW9ucy9jcm9zcy1maWVsZC12YWxpZGF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7O0dBTUc7QUFHSCxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTVELE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQ2xDLE9BQXdCLEVBQ3hCLE1BSUMsRUFDd0IsRUFBRTtJQUMzQixNQUFNLFFBQVEsR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBb0IsQ0FBQztJQUM3RSxNQUFNLE9BQU8sR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBb0IsQ0FBQztJQUMzRSxJQUFJLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDdkMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO1NBQU0sQ0FBQztRQUNOLE1BQU0sUUFBUSxHQUNaLE1BQU0sQ0FBQyxLQUFLO1lBQ1osZUFBZSxNQUFNLENBQUMsbUJBQW1CLGdCQUFnQixNQUFNLENBQUMsa0JBQWtCLEdBQUcsQ0FBQztRQUN4RixTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDNUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQ3JDLE9BQXdCLEVBQ3hCLE1BSUMsRUFDd0IsRUFBRTtJQUMzQixNQUFNLFFBQVEsR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBb0IsQ0FBQztJQUM3RSxNQUFNLE9BQU8sR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBb0IsQ0FBQztJQUMzRSxJQUFJLFFBQVEsRUFBRSxLQUFLLElBQUksT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ3RDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLFFBQVEsR0FDWixNQUFNLENBQUMsS0FBSztZQUNaLGVBQWUsTUFBTSxDQUFDLG1CQUFtQixvQkFBb0IsTUFBTSxDQUFDLGtCQUFrQixHQUFHLENBQUM7UUFDNUYsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUNyQyxPQUF3QixFQUN4QixNQUlDLEVBQ3dCLEVBQUU7SUFDM0IsTUFBTSxRQUFRLEdBQUcsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQW9CLENBQUM7SUFDN0UsTUFBTSxPQUFPLEdBQUcsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQW9CLENBQUM7SUFDM0UsSUFBSSxRQUFRLEVBQUUsS0FBSyxJQUFJLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN0QyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNyQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7U0FBTSxDQUFDO1FBQ04sTUFBTSxRQUFRLEdBQ1osTUFBTSxDQUFDLEtBQUs7WUFDWixtQkFBbUIsTUFBTSxDQUFDLG1CQUFtQixPQUFPLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxDQUFDO1FBQ25GLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM1QyxTQUFTLENBQUMsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDM0MsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgU2xhdmtvIE1paGFqbG92aWMgQWxsIFJpZ2h0cyBSZXNlcnZlZC5cclxuICpcclxuICogVXNlIG9mIHRoaXMgc291cmNlIGNvZGUgaXMgZ292ZXJuZWQgYnkgYW4gSVNDLXN0eWxlIGxpY2Vuc2UgdGhhdCBjYW4gYmVcclxuICogZm91bmQgYXQgaHR0cHM6Ly93d3cuaXNjLm9yZy9saWNlbnNlcy9cclxuICovXHJcblxyXG5pbXBvcnQgeyBBYnN0cmFjdENvbnRyb2wsIFZhbGlkYXRpb25FcnJvcnMgfSBmcm9tIFwiQGFuZ3VsYXIvZm9ybXNcIjtcclxuaW1wb3J0IHsgcmVtb3ZlRXJyb3JzLCBzZXRFcnJvcnMgfSBmcm9tIFwiLi4vaGVscGVycy9lcnJvcnNcIjtcclxuXHJcbmV4cG9ydCBjb25zdCByZXF1aXJlZElmVmFsaWRhdGlvbiA9IChcclxuICBjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsXHJcbiAgY29uZmlnOiB7XHJcbiAgICByZXF1aXJlZENvbnRyb2xOYW1lOiBzdHJpbmc7XHJcbiAgICBjb250cm9sVG9DaGVja05hbWU6IHN0cmluZztcclxuICAgIGVycm9yPzogc3RyaW5nO1xyXG4gIH1cclxuKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xyXG4gIGNvbnN0IHJlcXVpcmVkID0gY29udHJvbD8uZ2V0KGNvbmZpZy5yZXF1aXJlZENvbnRyb2xOYW1lKSBhcyBBYnN0cmFjdENvbnRyb2w7XHJcbiAgY29uc3QgdG9DaGVjayA9IGNvbnRyb2w/LmdldChjb25maWcuY29udHJvbFRvQ2hlY2tOYW1lKSBhcyBBYnN0cmFjdENvbnRyb2w7XHJcbiAgaWYgKHJlcXVpcmVkPy52YWx1ZSB8fCAhdG9DaGVjaz8udmFsdWUpIHtcclxuICAgIHJlbW92ZUVycm9ycyhyZXF1aXJlZCwgW1wicmVxdWlyZWRcIl0pO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IGVycm9yVmFsID1cclxuICAgICAgY29uZmlnLmVycm9yID8/XHJcbiAgICAgIGBSZXF1aXJlZCBpcyAke2NvbmZpZy5yZXF1aXJlZENvbnRyb2xOYW1lfSB3aGVuIGhhdmluZyAke2NvbmZpZy5jb250cm9sVG9DaGVja05hbWV9LmA7XHJcbiAgICBzZXRFcnJvcnMocmVxdWlyZWQsIHsgcmVxdWlyZWQ6IGVycm9yVmFsIH0pO1xyXG4gICAgcmV0dXJuIHsgW2Vycm9yVmFsXTogdHJ1ZSB9O1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZXF1aXJlZElmTm90VmFsaWRhdGlvbiA9IChcclxuICBjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsXHJcbiAgY29uZmlnOiB7XHJcbiAgICByZXF1aXJlZENvbnRyb2xOYW1lOiBzdHJpbmc7XHJcbiAgICBjb250cm9sVG9DaGVja05hbWU6IHN0cmluZztcclxuICAgIGVycm9yPzogc3RyaW5nO1xyXG4gIH1cclxuKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xyXG4gIGNvbnN0IHJlcXVpcmVkID0gY29udHJvbD8uZ2V0KGNvbmZpZy5yZXF1aXJlZENvbnRyb2xOYW1lKSBhcyBBYnN0cmFjdENvbnRyb2w7XHJcbiAgY29uc3QgdG9DaGVjayA9IGNvbnRyb2w/LmdldChjb25maWcuY29udHJvbFRvQ2hlY2tOYW1lKSBhcyBBYnN0cmFjdENvbnRyb2w7XHJcbiAgaWYgKHJlcXVpcmVkPy52YWx1ZSB8fCB0b0NoZWNrPy52YWx1ZSkge1xyXG4gICAgcmVtb3ZlRXJyb3JzKHJlcXVpcmVkLCBbXCJyZXF1aXJlZFwiXSk7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgZXJyb3JWYWwgPVxyXG4gICAgICBjb25maWcuZXJyb3IgPz9cclxuICAgICAgYFJlcXVpcmVkIGlzICR7Y29uZmlnLnJlcXVpcmVkQ29udHJvbE5hbWV9IHdoZW4gbm90IGhhdmluZyAke2NvbmZpZy5jb250cm9sVG9DaGVja05hbWV9LmA7XHJcbiAgICBzZXRFcnJvcnMocmVxdWlyZWQsIHsgcmVxdWlyZWQ6IGVycm9yVmFsIH0pO1xyXG4gICAgcmV0dXJuIHsgW2Vycm9yVmFsXTogdHJ1ZSB9O1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCByZXF1aXJlZEV0aGVyVmFsaWRhdGlvbiA9IChcclxuICBjb250cm9sOiBBYnN0cmFjdENvbnRyb2wsXHJcbiAgY29uZmlnOiB7XHJcbiAgICByZXF1aXJlZENvbnRyb2xOYW1lOiBzdHJpbmc7XHJcbiAgICBjb250cm9sVG9DaGVja05hbWU6IHN0cmluZztcclxuICAgIGVycm9yPzogc3RyaW5nO1xyXG4gIH1cclxuKTogVmFsaWRhdGlvbkVycm9ycyB8IG51bGwgPT4ge1xyXG4gIGNvbnN0IHJlcXVpcmVkID0gY29udHJvbD8uZ2V0KGNvbmZpZy5yZXF1aXJlZENvbnRyb2xOYW1lKSBhcyBBYnN0cmFjdENvbnRyb2w7XHJcbiAgY29uc3QgdG9DaGVjayA9IGNvbnRyb2w/LmdldChjb25maWcuY29udHJvbFRvQ2hlY2tOYW1lKSBhcyBBYnN0cmFjdENvbnRyb2w7XHJcbiAgaWYgKHJlcXVpcmVkPy52YWx1ZSB8fCB0b0NoZWNrPy52YWx1ZSkge1xyXG4gICAgcmVtb3ZlRXJyb3JzKHJlcXVpcmVkLCBbXCJyZXF1aXJlZFwiXSk7XHJcbiAgICByZW1vdmVFcnJvcnModG9DaGVjaywgW1wicmVxdWlyZWRcIl0pO1xyXG4gICAgcmV0dXJuIG51bGw7XHJcbiAgfSBlbHNlIHtcclxuICAgIGNvbnN0IGVycm9yVmFsID1cclxuICAgICAgY29uZmlnLmVycm9yID8/XHJcbiAgICAgIGBSZXF1aXJlZCBlaXRoZXIgJHtjb25maWcucmVxdWlyZWRDb250cm9sTmFtZX0gb3IgJHtjb25maWcuY29udHJvbFRvQ2hlY2tOYW1lfS5gO1xyXG4gICAgc2V0RXJyb3JzKHJlcXVpcmVkLCB7IHJlcXVpcmVkOiBlcnJvclZhbCB9KTtcclxuICAgIHNldEVycm9ycyh0b0NoZWNrLCB7IHJlcXVpcmVkOiBlcnJvclZhbCB9KTtcclxuICAgIHJldHVybiB7IFtlcnJvclZhbF06IHRydWUgfTtcclxuICB9XHJcbn07XHJcbiJdfQ==