import { removeErrors, setErrors } from "../helpers/errors";
export const requiredIfValidation = (control, config) => {
    const required = control?.get(config.requiredControlName);
    const toCheck = control?.get(config.controlToCheckName);
    if (required?.value || !toCheck?.value) {
        removeErrors(required, ["required"]);
        return null;
    }
    else {
        const errorVal = config.error ??
            `Required is ${config.requiredControlName} when having ${config.controlToCheckName}.`;
        setErrors(required, { required: errorVal });
        return { [errorVal]: true };
    }
};
export const requiredIfNotValidation = (control, config) => {
    const required = control?.get(config.requiredControlName);
    const toCheck = control?.get(config.controlToCheckName);
    if (required?.value || toCheck?.value) {
        removeErrors(required, ["required"]);
        return null;
    }
    else {
        const errorVal = config.error ??
            `Required is ${config.requiredControlName} when not having ${config.controlToCheckName}.`;
        setErrors(required, { required: errorVal });
        return { [errorVal]: true };
    }
};
export const requiredEtherValidation = (control, config) => {
    const required = control?.get(config.requiredControlName);
    const toCheck = control?.get(config.controlToCheckName);
    if (required?.value || toCheck?.value) {
        removeErrors(required, ["required"]);
        removeErrors(toCheck, ["required"]);
        return null;
    }
    else {
        const errorVal = config.error ??
            `Required either ${config.requiredControlName} or ${config.controlToCheckName}.`;
        setErrors(required, { required: errorVal });
        setErrors(toCheck, { required: errorVal });
        return { [errorVal]: true };
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY3Jvc3MtZmllbGQtdmFsaWRhdGlvbnMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9uZ3gtdmFsaWRhdG9yLXBhY2svc3JjL2xpYi92YWxpZGF0aW9ucy9jcm9zcy1maWVsZC12YWxpZGF0aW9ucy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFDQSxPQUFPLEVBQUUsWUFBWSxFQUFFLFNBQVMsRUFBRSxNQUFNLG1CQUFtQixDQUFDO0FBRTVELE1BQU0sQ0FBQyxNQUFNLG9CQUFvQixHQUFHLENBQ2xDLE9BQXdCLEVBQ3hCLE1BSUMsRUFDd0IsRUFBRTtJQUMzQixNQUFNLFFBQVEsR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBb0IsQ0FBQztJQUM3RSxNQUFNLE9BQU8sR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBb0IsQ0FBQztJQUMzRSxJQUFJLFFBQVEsRUFBRSxLQUFLLElBQUksQ0FBQyxPQUFPLEVBQUUsS0FBSyxFQUFFLENBQUM7UUFDdkMsWUFBWSxDQUFDLFFBQVEsRUFBRSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUM7UUFDckMsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDO1NBQU0sQ0FBQztRQUNOLE1BQU0sUUFBUSxHQUNaLE1BQU0sQ0FBQyxLQUFLO1lBQ1osZUFBZSxNQUFNLENBQUMsbUJBQW1CLGdCQUFnQixNQUFNLENBQUMsa0JBQWtCLEdBQUcsQ0FBQztRQUN4RixTQUFTLENBQUMsUUFBUSxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDNUMsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQztBQUNILENBQUMsQ0FBQztBQUVGLE1BQU0sQ0FBQyxNQUFNLHVCQUF1QixHQUFHLENBQ3JDLE9BQXdCLEVBQ3hCLE1BSUMsRUFDd0IsRUFBRTtJQUMzQixNQUFNLFFBQVEsR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBb0IsQ0FBQztJQUM3RSxNQUFNLE9BQU8sR0FBRyxPQUFPLEVBQUUsR0FBRyxDQUFDLE1BQU0sQ0FBQyxrQkFBa0IsQ0FBb0IsQ0FBQztJQUMzRSxJQUFJLFFBQVEsRUFBRSxLQUFLLElBQUksT0FBTyxFQUFFLEtBQUssRUFBRSxDQUFDO1FBQ3RDLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDO1FBQ3JDLE9BQU8sSUFBSSxDQUFDO0lBQ2QsQ0FBQztTQUFNLENBQUM7UUFDTixNQUFNLFFBQVEsR0FDWixNQUFNLENBQUMsS0FBSztZQUNaLGVBQWUsTUFBTSxDQUFDLG1CQUFtQixvQkFBb0IsTUFBTSxDQUFDLGtCQUFrQixHQUFHLENBQUM7UUFDNUYsU0FBUyxDQUFDLFFBQVEsRUFBRSxFQUFFLFFBQVEsRUFBRSxRQUFRLEVBQUUsQ0FBQyxDQUFDO1FBQzVDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyxFQUFFLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7QUFDSCxDQUFDLENBQUM7QUFFRixNQUFNLENBQUMsTUFBTSx1QkFBdUIsR0FBRyxDQUNyQyxPQUF3QixFQUN4QixNQUlDLEVBQ3dCLEVBQUU7SUFDM0IsTUFBTSxRQUFRLEdBQUcsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsbUJBQW1CLENBQW9CLENBQUM7SUFDN0UsTUFBTSxPQUFPLEdBQUcsT0FBTyxFQUFFLEdBQUcsQ0FBQyxNQUFNLENBQUMsa0JBQWtCLENBQW9CLENBQUM7SUFDM0UsSUFBSSxRQUFRLEVBQUUsS0FBSyxJQUFJLE9BQU8sRUFBRSxLQUFLLEVBQUUsQ0FBQztRQUN0QyxZQUFZLENBQUMsUUFBUSxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNyQyxZQUFZLENBQUMsT0FBTyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQztRQUNwQyxPQUFPLElBQUksQ0FBQztJQUNkLENBQUM7U0FBTSxDQUFDO1FBQ04sTUFBTSxRQUFRLEdBQ1osTUFBTSxDQUFDLEtBQUs7WUFDWixtQkFBbUIsTUFBTSxDQUFDLG1CQUFtQixPQUFPLE1BQU0sQ0FBQyxrQkFBa0IsR0FBRyxDQUFDO1FBQ25GLFNBQVMsQ0FBQyxRQUFRLEVBQUUsRUFBRSxRQUFRLEVBQUUsUUFBUSxFQUFFLENBQUMsQ0FBQztRQUM1QyxTQUFTLENBQUMsT0FBTyxFQUFFLEVBQUUsUUFBUSxFQUFFLFFBQVEsRUFBRSxDQUFDLENBQUM7UUFDM0MsT0FBTyxFQUFFLENBQUMsUUFBUSxDQUFDLEVBQUUsSUFBSSxFQUFFLENBQUM7SUFDOUIsQ0FBQztBQUNILENBQUMsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFic3RyYWN0Q29udHJvbCwgVmFsaWRhdGlvbkVycm9ycyB9IGZyb20gXCJAYW5ndWxhci9mb3Jtc1wiO1xyXG5pbXBvcnQgeyByZW1vdmVFcnJvcnMsIHNldEVycm9ycyB9IGZyb20gXCIuLi9oZWxwZXJzL2Vycm9yc1wiO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlcXVpcmVkSWZWYWxpZGF0aW9uID0gKFxyXG4gIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxcclxuICBjb25maWc6IHtcclxuICAgIHJlcXVpcmVkQ29udHJvbE5hbWU6IHN0cmluZztcclxuICAgIGNvbnRyb2xUb0NoZWNrTmFtZTogc3RyaW5nO1xyXG4gICAgZXJyb3I/OiBzdHJpbmc7XHJcbiAgfVxyXG4pOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XHJcbiAgY29uc3QgcmVxdWlyZWQgPSBjb250cm9sPy5nZXQoY29uZmlnLnJlcXVpcmVkQ29udHJvbE5hbWUpIGFzIEFic3RyYWN0Q29udHJvbDtcclxuICBjb25zdCB0b0NoZWNrID0gY29udHJvbD8uZ2V0KGNvbmZpZy5jb250cm9sVG9DaGVja05hbWUpIGFzIEFic3RyYWN0Q29udHJvbDtcclxuICBpZiAocmVxdWlyZWQ/LnZhbHVlIHx8ICF0b0NoZWNrPy52YWx1ZSkge1xyXG4gICAgcmVtb3ZlRXJyb3JzKHJlcXVpcmVkLCBbXCJyZXF1aXJlZFwiXSk7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgZXJyb3JWYWwgPVxyXG4gICAgICBjb25maWcuZXJyb3IgPz9cclxuICAgICAgYFJlcXVpcmVkIGlzICR7Y29uZmlnLnJlcXVpcmVkQ29udHJvbE5hbWV9IHdoZW4gaGF2aW5nICR7Y29uZmlnLmNvbnRyb2xUb0NoZWNrTmFtZX0uYDtcclxuICAgIHNldEVycm9ycyhyZXF1aXJlZCwgeyByZXF1aXJlZDogZXJyb3JWYWwgfSk7XHJcbiAgICByZXR1cm4geyBbZXJyb3JWYWxdOiB0cnVlIH07XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlcXVpcmVkSWZOb3RWYWxpZGF0aW9uID0gKFxyXG4gIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxcclxuICBjb25maWc6IHtcclxuICAgIHJlcXVpcmVkQ29udHJvbE5hbWU6IHN0cmluZztcclxuICAgIGNvbnRyb2xUb0NoZWNrTmFtZTogc3RyaW5nO1xyXG4gICAgZXJyb3I/OiBzdHJpbmc7XHJcbiAgfVxyXG4pOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XHJcbiAgY29uc3QgcmVxdWlyZWQgPSBjb250cm9sPy5nZXQoY29uZmlnLnJlcXVpcmVkQ29udHJvbE5hbWUpIGFzIEFic3RyYWN0Q29udHJvbDtcclxuICBjb25zdCB0b0NoZWNrID0gY29udHJvbD8uZ2V0KGNvbmZpZy5jb250cm9sVG9DaGVja05hbWUpIGFzIEFic3RyYWN0Q29udHJvbDtcclxuICBpZiAocmVxdWlyZWQ/LnZhbHVlIHx8IHRvQ2hlY2s/LnZhbHVlKSB7XHJcbiAgICByZW1vdmVFcnJvcnMocmVxdWlyZWQsIFtcInJlcXVpcmVkXCJdKTtcclxuICAgIHJldHVybiBudWxsO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBjb25zdCBlcnJvclZhbCA9XHJcbiAgICAgIGNvbmZpZy5lcnJvciA/P1xyXG4gICAgICBgUmVxdWlyZWQgaXMgJHtjb25maWcucmVxdWlyZWRDb250cm9sTmFtZX0gd2hlbiBub3QgaGF2aW5nICR7Y29uZmlnLmNvbnRyb2xUb0NoZWNrTmFtZX0uYDtcclxuICAgIHNldEVycm9ycyhyZXF1aXJlZCwgeyByZXF1aXJlZDogZXJyb3JWYWwgfSk7XHJcbiAgICByZXR1cm4geyBbZXJyb3JWYWxdOiB0cnVlIH07XHJcbiAgfVxyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlcXVpcmVkRXRoZXJWYWxpZGF0aW9uID0gKFxyXG4gIGNvbnRyb2w6IEFic3RyYWN0Q29udHJvbCxcclxuICBjb25maWc6IHtcclxuICAgIHJlcXVpcmVkQ29udHJvbE5hbWU6IHN0cmluZztcclxuICAgIGNvbnRyb2xUb0NoZWNrTmFtZTogc3RyaW5nO1xyXG4gICAgZXJyb3I/OiBzdHJpbmc7XHJcbiAgfVxyXG4pOiBWYWxpZGF0aW9uRXJyb3JzIHwgbnVsbCA9PiB7XHJcbiAgY29uc3QgcmVxdWlyZWQgPSBjb250cm9sPy5nZXQoY29uZmlnLnJlcXVpcmVkQ29udHJvbE5hbWUpIGFzIEFic3RyYWN0Q29udHJvbDtcclxuICBjb25zdCB0b0NoZWNrID0gY29udHJvbD8uZ2V0KGNvbmZpZy5jb250cm9sVG9DaGVja05hbWUpIGFzIEFic3RyYWN0Q29udHJvbDtcclxuICBpZiAocmVxdWlyZWQ/LnZhbHVlIHx8IHRvQ2hlY2s/LnZhbHVlKSB7XHJcbiAgICByZW1vdmVFcnJvcnMocmVxdWlyZWQsIFtcInJlcXVpcmVkXCJdKTtcclxuICAgIHJlbW92ZUVycm9ycyh0b0NoZWNrLCBbXCJyZXF1aXJlZFwiXSk7XHJcbiAgICByZXR1cm4gbnVsbDtcclxuICB9IGVsc2Uge1xyXG4gICAgY29uc3QgZXJyb3JWYWwgPVxyXG4gICAgICBjb25maWcuZXJyb3IgPz9cclxuICAgICAgYFJlcXVpcmVkIGVpdGhlciAke2NvbmZpZy5yZXF1aXJlZENvbnRyb2xOYW1lfSBvciAke2NvbmZpZy5jb250cm9sVG9DaGVja05hbWV9LmA7XHJcbiAgICBzZXRFcnJvcnMocmVxdWlyZWQsIHsgcmVxdWlyZWQ6IGVycm9yVmFsIH0pO1xyXG4gICAgc2V0RXJyb3JzKHRvQ2hlY2ssIHsgcmVxdWlyZWQ6IGVycm9yVmFsIH0pO1xyXG4gICAgcmV0dXJuIHsgW2Vycm9yVmFsXTogdHJ1ZSB9O1xyXG4gIH1cclxufTtcclxuIl19